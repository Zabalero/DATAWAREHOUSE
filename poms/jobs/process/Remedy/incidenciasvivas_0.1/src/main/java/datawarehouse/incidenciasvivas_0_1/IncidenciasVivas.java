// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package datawarehouse.incidenciasvivas_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: IncidenciasVivas Purpose: <br>
 * Description: Este proceso carga las incidencias vivas <br>
 * @author 
 * @version 7.1.1.20181026_1147
 * @status 
 */
public class IncidenciasVivas implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private Object[] multiThreadLockWrite = new Object[0];

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "IncidenciasVivas";
	private final String projectName = "DATAWAREHOUSE";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Object>());

	private final java.util.Map<String, Long> start_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Long>());
	private final java.util.Map<String, Long> end_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Long>());
	private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Boolean>());
	public final java.util.List<String[]> globalBuffer = java.util.Collections
			.synchronizedList(new java.util.ArrayList<String[]>());

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap
				.put(KEY_DB_DATASOURCES_RAW,
						new java.util.HashMap<String, javax.sql.DataSource>(
								dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent
						+ " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					IncidenciasVivas.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(IncidenciasVivas.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tSystem_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tSystem_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tConvertType_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMSSqlOutput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMSSqlRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tMSSqlRow_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSystem_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMSSqlRow_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tSystem_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tSystem_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tSystem_1 begin ] start
				 */

				ok_Hash.put("tSystem_1", false);
				start_Hash.put("tSystem_1", System.currentTimeMillis());

				currentComponent = "tSystem_1";

				int tos_count_tSystem_1 = 0;

				Runtime runtime_tSystem_1 = Runtime.getRuntime();

				String[] env_tSystem_1 = null;
				java.util.Map<String, String> envMap_tSystem_1 = System
						.getenv();
				java.util.Map<String, String> envMapClone_tSystem_1 = new java.util.HashMap();
				envMapClone_tSystem_1.putAll(envMap_tSystem_1);

				final Process ps_tSystem_1 = runtime_tSystem_1.exec(
						"cmd /c IncidenciasVivas.bat", env_tSystem_1,
						new java.io.File("C:/Automaticos/Remedy"));

				globalMap.remove("tSystem_1_OUTPUT");
				globalMap.remove("tSystem_1_ERROROUTPUT");

				Thread normal_tSystem_1 = new Thread() {
					public void run() {
						try {
							java.io.BufferedReader reader = new java.io.BufferedReader(
									new java.io.InputStreamReader(
											ps_tSystem_1.getInputStream()));
							String line = "";
							try {
								while ((line = reader.readLine()) != null) {

									System.out.println(line);
								}
							} finally {
								reader.close();
							}
						} catch (java.io.IOException ioe) {

							ioe.printStackTrace();
						}
					}
				};
				normal_tSystem_1.start();

				Thread error_tSystem_1 = new Thread() {
					public void run() {
						try {
							java.io.BufferedReader reader = new java.io.BufferedReader(
									new java.io.InputStreamReader(
											ps_tSystem_1.getErrorStream()));
							String line = "";
							try {
								while ((line = reader.readLine()) != null) {

									System.err.println(line);
								}
							} finally {
								reader.close();
							}
						} catch (java.io.IOException ioe) {

							ioe.printStackTrace();
						}
					}
				};
				error_tSystem_1.start();
				if (ps_tSystem_1.getOutputStream() != null) {
					ps_tSystem_1.getOutputStream().close();
				}
				ps_tSystem_1.waitFor();
				normal_tSystem_1.join(10000);
				error_tSystem_1.join(10000);

				/**
				 * [tSystem_1 begin ] stop
				 */

				/**
				 * [tSystem_1 main ] start
				 */

				currentComponent = "tSystem_1";

				tos_count_tSystem_1++;

				/**
				 * [tSystem_1 main ] stop
				 */

				/**
				 * [tSystem_1 process_data_begin ] start
				 */

				currentComponent = "tSystem_1";

				/**
				 * [tSystem_1 process_data_begin ] stop
				 */

				/**
				 * [tSystem_1 process_data_end ] start
				 */

				currentComponent = "tSystem_1";

				/**
				 * [tSystem_1 process_data_end ] stop
				 */

				/**
				 * [tSystem_1 end ] start
				 */

				currentComponent = "tSystem_1";

				globalMap.put("tSystem_1_EXIT_VALUE", ps_tSystem_1.exitValue());

				ok_Hash.put("tSystem_1", true);
				end_Hash.put("tSystem_1", System.currentTimeMillis());

				/**
				 * [tSystem_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tSystem_1:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
			}

			tFileInputDelimited_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tSystem_1 finally ] start
				 */

				currentComponent = "tSystem_1";

				/**
				 * [tSystem_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tSystem_1_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_DATAWAREHOUSE_IncidenciasVivas = new byte[0];
		static byte[] commonByteArray_DATAWAREHOUSE_IncidenciasVivas = new byte[0];

		public String Grupo;

		public String getGrupo() {
			return this.Grupo;
		}

		public String IDIncidencia;

		public String getIDIncidencia() {
			return this.IDIncidencia;
		}

		public java.util.Date Status_History_Atendida_TIME;

		public java.util.Date getStatus_History_Atendida_TIME() {
			return this.Status_History_Atendida_TIME;
		}

		public String CAR_FTTH_NumeroCTO;

		public String getCAR_FTTH_NumeroCTO() {
			return this.CAR_FTTH_NumeroCTO;
		}

		public String CAR_FTTH_Provincia;

		public String getCAR_FTTH_Provincia() {
			return this.CAR_FTTH_Provincia;
		}

		public String Estado;

		public String getEstado() {
			return this.Estado;
		}

		public String GrupoEscalada;

		public String getGrupoEscalada() {
			return this.GrupoEscalada;
		}

		public String CAR_ID_Cliente;

		public String getCAR_ID_Cliente() {
			return this.CAR_ID_Cliente;
		}

		public String Cliente;

		public String getCliente() {
			return this.Cliente;
		}

		public String Apellidos;

		public String getApellidos() {
			return this.Apellidos;
		}

		public String CAR_ID_Direccion;

		public String getCAR_ID_Direccion() {
			return this.CAR_ID_Direccion;
		}

		public String CAR_FTTH_Poblacion;

		public String getCAR_FTTH_Poblacion() {
			return this.CAR_FTTH_Poblacion;
		}

		public String CAR_FTTH_CodPostal;

		public String getCAR_FTTH_CodPostal() {
			return this.CAR_FTTH_CodPostal;
		}

		public String CAR_FTTH_Gescal37;

		public String getCAR_FTTH_Gescal37() {
			return this.CAR_FTTH_Gescal37;
		}

		public String CAR_FTTH_IUA;

		public String getCAR_FTTH_IUA() {
			return this.CAR_FTTH_IUA;
		}

		public String CAR_FTTH_TipoCTO;

		public String getCAR_FTTH_TipoCTO() {
			return this.CAR_FTTH_TipoCTO;
		}

		public String CAR_FTTH_TelefonoServicio;

		public String getCAR_FTTH_TelefonoServicio() {
			return this.CAR_FTTH_TelefonoServicio;
		}

		public String CAR_FTTH_Numero;

		public String getCAR_FTTH_Numero() {
			return this.CAR_FTTH_Numero;
		}

		public String CAR_FTTH_PerfilServicio;

		public String getCAR_FTTH_PerfilServicio() {
			return this.CAR_FTTH_PerfilServicio;
		}

		public String Descripcion;

		public String getDescripcion() {
			return this.Descripcion;
		}

		public String DescripcionI;

		public String getDescripcionI() {
			return this.DescripcionI;
		}

		public String DescripcionProblema;

		public String getDescripcionProblema() {
			return this.DescripcionProblema;
		}

		public String EstadoProvision;

		public String getEstadoProvision() {
			return this.EstadoProvision;
		}

		public String EstadoReal;

		public String getEstadoReal() {
			return this.EstadoReal;
		}

		public java.util.Date FEC_Fecha_Cierre;

		public java.util.Date getFEC_Fecha_Cierre() {
			return this.FEC_Fecha_Cierre;
		}

		public java.util.Date FEC_Fecha_Resolucion;

		public java.util.Date getFEC_Fecha_Resolucion() {
			return this.FEC_Fecha_Resolucion;
		}

		public java.util.Date FEC_Vencimiento_SLA;

		public java.util.Date getFEC_Vencimiento_SLA() {
			return this.FEC_Vencimiento_SLA;
		}

		public java.util.Date FHEnviadoServTecnico;

		public java.util.Date getFHEnviadoServTecnico() {
			return this.FHEnviadoServTecnico;
		}

		public java.util.Date FHEscaladoTerceros;

		public java.util.Date getFHEscaladoTerceros() {
			return this.FHEscaladoTerceros;
		}

		public java.util.Date FechaModificacion;

		public java.util.Date getFechaModificacion() {
			return this.FechaModificacion;
		}

		public java.util.Date FechaNivel1;

		public java.util.Date getFechaNivel1() {
			return this.FechaNivel1;
		}

		public java.util.Date Fecha_HoraIncidencia;

		public java.util.Date getFecha_HoraIncidencia() {
			return this.Fecha_HoraIncidencia;
		}

		public String GrupoResponsable;

		public String getGrupoResponsable() {
			return this.GrupoResponsable;
		}

		public String CausaR;

		public String getCausaR() {
			return this.CausaR;
		}

		public String ModificadaPor;

		public String getModificadaPor() {
			return this.ModificadaPor;
		}

		public String MotivoEstado;

		public String getMotivoEstado() {
			return this.MotivoEstado;
		}

		public String ProblemaR;

		public String getProblemaR() {
			return this.ProblemaR;
		}

		public String Prioridad;

		public String getPrioridad() {
			return this.Prioridad;
		}

		public String ReferenciaExterna;

		public String getReferenciaExterna() {
			return this.ReferenciaExterna;
		}

		public String Retipifica;

		public String getRetipifica() {
			return this.Retipifica;
		}

		public String SEL_FTTH_Pruebade;

		public String getSEL_FTTH_Pruebade() {
			return this.SEL_FTTH_Pruebade;
		}

		public String ServicioR;

		public String getServicioR() {
			return this.ServicioR;
		}

		public String ServicioI;

		public String getServicioI() {
			return this.ServicioI;
		}

		public String Severidad;

		public String getSeveridad() {
			return this.Severidad;
		}

		public String Sintoma;

		public String getSintoma() {
			return this.Sintoma;
		}

		public String SintomaI;

		public String getSintomaI() {
			return this.SintomaI;
		}

		public String SolucionAbreviada;

		public String getSolucionAbreviada() {
			return this.SolucionAbreviada;
		}

		public String SolucionDetallada;

		public String getSolucionDetallada() {
			return this.SolucionDetallada;
		}

		public String SolucionServicio;

		public String getSolucionServicio() {
			return this.SolucionServicio;
		}

		public String TempEstado;

		public String getTempEstado() {
			return this.TempEstado;
		}

		public String Tipo;

		public String getTipo() {
			return this.Tipo;
		}

		public String TomadaPorAgente;

		public String getTomadaPorAgente() {
			return this.TomadaPorAgente;
		}

		public String Servicio;

		public String getServicio() {
			return this.Servicio;
		}

		public String ViaEntradaTicket;

		public String getViaEntradaTicket() {
			return this.ViaEntradaTicket;
		}

		public String TomadaPorGrupo;

		public String getTomadaPorGrupo() {
			return this.TomadaPorGrupo;
		}

		public String N_Inc_Principal;

		public String getN_Inc_Principal() {
			return this.N_Inc_Principal;
		}

		public String TipoI;

		public String getTipoI() {
			return this.TipoI;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DATAWAREHOUSE_IncidenciasVivas.length) {
					if (length < 1024
							&& commonByteArray_DATAWAREHOUSE_IncidenciasVivas.length == 0) {
						commonByteArray_DATAWAREHOUSE_IncidenciasVivas = new byte[1024];
					} else {
						commonByteArray_DATAWAREHOUSE_IncidenciasVivas = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DATAWAREHOUSE_IncidenciasVivas,
						0, length);
				strReturn = new String(
						commonByteArray_DATAWAREHOUSE_IncidenciasVivas, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DATAWAREHOUSE_IncidenciasVivas) {

				try {

					int length = 0;

					this.Grupo = readString(dis);

					this.IDIncidencia = readString(dis);

					this.Status_History_Atendida_TIME = readDate(dis);

					this.CAR_FTTH_NumeroCTO = readString(dis);

					this.CAR_FTTH_Provincia = readString(dis);

					this.Estado = readString(dis);

					this.GrupoEscalada = readString(dis);

					this.CAR_ID_Cliente = readString(dis);

					this.Cliente = readString(dis);

					this.Apellidos = readString(dis);

					this.CAR_ID_Direccion = readString(dis);

					this.CAR_FTTH_Poblacion = readString(dis);

					this.CAR_FTTH_CodPostal = readString(dis);

					this.CAR_FTTH_Gescal37 = readString(dis);

					this.CAR_FTTH_IUA = readString(dis);

					this.CAR_FTTH_TipoCTO = readString(dis);

					this.CAR_FTTH_TelefonoServicio = readString(dis);

					this.CAR_FTTH_Numero = readString(dis);

					this.CAR_FTTH_PerfilServicio = readString(dis);

					this.Descripcion = readString(dis);

					this.DescripcionI = readString(dis);

					this.DescripcionProblema = readString(dis);

					this.EstadoProvision = readString(dis);

					this.EstadoReal = readString(dis);

					this.FEC_Fecha_Cierre = readDate(dis);

					this.FEC_Fecha_Resolucion = readDate(dis);

					this.FEC_Vencimiento_SLA = readDate(dis);

					this.FHEnviadoServTecnico = readDate(dis);

					this.FHEscaladoTerceros = readDate(dis);

					this.FechaModificacion = readDate(dis);

					this.FechaNivel1 = readDate(dis);

					this.Fecha_HoraIncidencia = readDate(dis);

					this.GrupoResponsable = readString(dis);

					this.CausaR = readString(dis);

					this.ModificadaPor = readString(dis);

					this.MotivoEstado = readString(dis);

					this.ProblemaR = readString(dis);

					this.Prioridad = readString(dis);

					this.ReferenciaExterna = readString(dis);

					this.Retipifica = readString(dis);

					this.SEL_FTTH_Pruebade = readString(dis);

					this.ServicioR = readString(dis);

					this.ServicioI = readString(dis);

					this.Severidad = readString(dis);

					this.Sintoma = readString(dis);

					this.SintomaI = readString(dis);

					this.SolucionAbreviada = readString(dis);

					this.SolucionDetallada = readString(dis);

					this.SolucionServicio = readString(dis);

					this.TempEstado = readString(dis);

					this.Tipo = readString(dis);

					this.TomadaPorAgente = readString(dis);

					this.Servicio = readString(dis);

					this.ViaEntradaTicket = readString(dis);

					this.TomadaPorGrupo = readString(dis);

					this.N_Inc_Principal = readString(dis);

					this.TipoI = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Grupo, dos);

				// String

				writeString(this.IDIncidencia, dos);

				// java.util.Date

				writeDate(this.Status_History_Atendida_TIME, dos);

				// String

				writeString(this.CAR_FTTH_NumeroCTO, dos);

				// String

				writeString(this.CAR_FTTH_Provincia, dos);

				// String

				writeString(this.Estado, dos);

				// String

				writeString(this.GrupoEscalada, dos);

				// String

				writeString(this.CAR_ID_Cliente, dos);

				// String

				writeString(this.Cliente, dos);

				// String

				writeString(this.Apellidos, dos);

				// String

				writeString(this.CAR_ID_Direccion, dos);

				// String

				writeString(this.CAR_FTTH_Poblacion, dos);

				// String

				writeString(this.CAR_FTTH_CodPostal, dos);

				// String

				writeString(this.CAR_FTTH_Gescal37, dos);

				// String

				writeString(this.CAR_FTTH_IUA, dos);

				// String

				writeString(this.CAR_FTTH_TipoCTO, dos);

				// String

				writeString(this.CAR_FTTH_TelefonoServicio, dos);

				// String

				writeString(this.CAR_FTTH_Numero, dos);

				// String

				writeString(this.CAR_FTTH_PerfilServicio, dos);

				// String

				writeString(this.Descripcion, dos);

				// String

				writeString(this.DescripcionI, dos);

				// String

				writeString(this.DescripcionProblema, dos);

				// String

				writeString(this.EstadoProvision, dos);

				// String

				writeString(this.EstadoReal, dos);

				// java.util.Date

				writeDate(this.FEC_Fecha_Cierre, dos);

				// java.util.Date

				writeDate(this.FEC_Fecha_Resolucion, dos);

				// java.util.Date

				writeDate(this.FEC_Vencimiento_SLA, dos);

				// java.util.Date

				writeDate(this.FHEnviadoServTecnico, dos);

				// java.util.Date

				writeDate(this.FHEscaladoTerceros, dos);

				// java.util.Date

				writeDate(this.FechaModificacion, dos);

				// java.util.Date

				writeDate(this.FechaNivel1, dos);

				// java.util.Date

				writeDate(this.Fecha_HoraIncidencia, dos);

				// String

				writeString(this.GrupoResponsable, dos);

				// String

				writeString(this.CausaR, dos);

				// String

				writeString(this.ModificadaPor, dos);

				// String

				writeString(this.MotivoEstado, dos);

				// String

				writeString(this.ProblemaR, dos);

				// String

				writeString(this.Prioridad, dos);

				// String

				writeString(this.ReferenciaExterna, dos);

				// String

				writeString(this.Retipifica, dos);

				// String

				writeString(this.SEL_FTTH_Pruebade, dos);

				// String

				writeString(this.ServicioR, dos);

				// String

				writeString(this.ServicioI, dos);

				// String

				writeString(this.Severidad, dos);

				// String

				writeString(this.Sintoma, dos);

				// String

				writeString(this.SintomaI, dos);

				// String

				writeString(this.SolucionAbreviada, dos);

				// String

				writeString(this.SolucionDetallada, dos);

				// String

				writeString(this.SolucionServicio, dos);

				// String

				writeString(this.TempEstado, dos);

				// String

				writeString(this.Tipo, dos);

				// String

				writeString(this.TomadaPorAgente, dos);

				// String

				writeString(this.Servicio, dos);

				// String

				writeString(this.ViaEntradaTicket, dos);

				// String

				writeString(this.TomadaPorGrupo, dos);

				// String

				writeString(this.N_Inc_Principal, dos);

				// String

				writeString(this.TipoI, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Grupo=" + Grupo);
			sb.append(",IDIncidencia=" + IDIncidencia);
			sb.append(",Status_History_Atendida_TIME="
					+ String.valueOf(Status_History_Atendida_TIME));
			sb.append(",CAR_FTTH_NumeroCTO=" + CAR_FTTH_NumeroCTO);
			sb.append(",CAR_FTTH_Provincia=" + CAR_FTTH_Provincia);
			sb.append(",Estado=" + Estado);
			sb.append(",GrupoEscalada=" + GrupoEscalada);
			sb.append(",CAR_ID_Cliente=" + CAR_ID_Cliente);
			sb.append(",Cliente=" + Cliente);
			sb.append(",Apellidos=" + Apellidos);
			sb.append(",CAR_ID_Direccion=" + CAR_ID_Direccion);
			sb.append(",CAR_FTTH_Poblacion=" + CAR_FTTH_Poblacion);
			sb.append(",CAR_FTTH_CodPostal=" + CAR_FTTH_CodPostal);
			sb.append(",CAR_FTTH_Gescal37=" + CAR_FTTH_Gescal37);
			sb.append(",CAR_FTTH_IUA=" + CAR_FTTH_IUA);
			sb.append(",CAR_FTTH_TipoCTO=" + CAR_FTTH_TipoCTO);
			sb.append(",CAR_FTTH_TelefonoServicio=" + CAR_FTTH_TelefonoServicio);
			sb.append(",CAR_FTTH_Numero=" + CAR_FTTH_Numero);
			sb.append(",CAR_FTTH_PerfilServicio=" + CAR_FTTH_PerfilServicio);
			sb.append(",Descripcion=" + Descripcion);
			sb.append(",DescripcionI=" + DescripcionI);
			sb.append(",DescripcionProblema=" + DescripcionProblema);
			sb.append(",EstadoProvision=" + EstadoProvision);
			sb.append(",EstadoReal=" + EstadoReal);
			sb.append(",FEC_Fecha_Cierre=" + String.valueOf(FEC_Fecha_Cierre));
			sb.append(",FEC_Fecha_Resolucion="
					+ String.valueOf(FEC_Fecha_Resolucion));
			sb.append(",FEC_Vencimiento_SLA="
					+ String.valueOf(FEC_Vencimiento_SLA));
			sb.append(",FHEnviadoServTecnico="
					+ String.valueOf(FHEnviadoServTecnico));
			sb.append(",FHEscaladoTerceros="
					+ String.valueOf(FHEscaladoTerceros));
			sb.append(",FechaModificacion=" + String.valueOf(FechaModificacion));
			sb.append(",FechaNivel1=" + String.valueOf(FechaNivel1));
			sb.append(",Fecha_HoraIncidencia="
					+ String.valueOf(Fecha_HoraIncidencia));
			sb.append(",GrupoResponsable=" + GrupoResponsable);
			sb.append(",CausaR=" + CausaR);
			sb.append(",ModificadaPor=" + ModificadaPor);
			sb.append(",MotivoEstado=" + MotivoEstado);
			sb.append(",ProblemaR=" + ProblemaR);
			sb.append(",Prioridad=" + Prioridad);
			sb.append(",ReferenciaExterna=" + ReferenciaExterna);
			sb.append(",Retipifica=" + Retipifica);
			sb.append(",SEL_FTTH_Pruebade=" + SEL_FTTH_Pruebade);
			sb.append(",ServicioR=" + ServicioR);
			sb.append(",ServicioI=" + ServicioI);
			sb.append(",Severidad=" + Severidad);
			sb.append(",Sintoma=" + Sintoma);
			sb.append(",SintomaI=" + SintomaI);
			sb.append(",SolucionAbreviada=" + SolucionAbreviada);
			sb.append(",SolucionDetallada=" + SolucionDetallada);
			sb.append(",SolucionServicio=" + SolucionServicio);
			sb.append(",TempEstado=" + TempEstado);
			sb.append(",Tipo=" + Tipo);
			sb.append(",TomadaPorAgente=" + TomadaPorAgente);
			sb.append(",Servicio=" + Servicio);
			sb.append(",ViaEntradaTicket=" + ViaEntradaTicket);
			sb.append(",TomadaPorGrupo=" + TomadaPorGrupo);
			sb.append(",N_Inc_Principal=" + N_Inc_Principal);
			sb.append(",TipoI=" + TipoI);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_DATAWAREHOUSE_IncidenciasVivas = new byte[0];
		static byte[] commonByteArray_DATAWAREHOUSE_IncidenciasVivas = new byte[0];

		public String Grupo;

		public String getGrupo() {
			return this.Grupo;
		}

		public String IDIncidencia;

		public String getIDIncidencia() {
			return this.IDIncidencia;
		}

		public java.util.Date Status_History_Atendida_TIME;

		public java.util.Date getStatus_History_Atendida_TIME() {
			return this.Status_History_Atendida_TIME;
		}

		public String CAR_FTTH_NumeroCTO;

		public String getCAR_FTTH_NumeroCTO() {
			return this.CAR_FTTH_NumeroCTO;
		}

		public String CAR_FTTH_Provincia;

		public String getCAR_FTTH_Provincia() {
			return this.CAR_FTTH_Provincia;
		}

		public String Estado;

		public String getEstado() {
			return this.Estado;
		}

		public String GrupoEscalada;

		public String getGrupoEscalada() {
			return this.GrupoEscalada;
		}

		public String CAR_ID_Cliente;

		public String getCAR_ID_Cliente() {
			return this.CAR_ID_Cliente;
		}

		public String Cliente;

		public String getCliente() {
			return this.Cliente;
		}

		public String Apellidos;

		public String getApellidos() {
			return this.Apellidos;
		}

		public String CAR_ID_Direccion;

		public String getCAR_ID_Direccion() {
			return this.CAR_ID_Direccion;
		}

		public String CAR_FTTH_Poblacion;

		public String getCAR_FTTH_Poblacion() {
			return this.CAR_FTTH_Poblacion;
		}

		public String CAR_FTTH_CodPostal;

		public String getCAR_FTTH_CodPostal() {
			return this.CAR_FTTH_CodPostal;
		}

		public String CAR_FTTH_Gescal37;

		public String getCAR_FTTH_Gescal37() {
			return this.CAR_FTTH_Gescal37;
		}

		public String CAR_FTTH_IUA;

		public String getCAR_FTTH_IUA() {
			return this.CAR_FTTH_IUA;
		}

		public String CAR_FTTH_TipoCTO;

		public String getCAR_FTTH_TipoCTO() {
			return this.CAR_FTTH_TipoCTO;
		}

		public String CAR_FTTH_TelefonoServicio;

		public String getCAR_FTTH_TelefonoServicio() {
			return this.CAR_FTTH_TelefonoServicio;
		}

		public String CAR_FTTH_Numero;

		public String getCAR_FTTH_Numero() {
			return this.CAR_FTTH_Numero;
		}

		public String CAR_FTTH_PerfilServicio;

		public String getCAR_FTTH_PerfilServicio() {
			return this.CAR_FTTH_PerfilServicio;
		}

		public String Descripcion;

		public String getDescripcion() {
			return this.Descripcion;
		}

		public String DescripcionI;

		public String getDescripcionI() {
			return this.DescripcionI;
		}

		public String DescripcionProblema;

		public String getDescripcionProblema() {
			return this.DescripcionProblema;
		}

		public String EstadoProvision;

		public String getEstadoProvision() {
			return this.EstadoProvision;
		}

		public String EstadoReal;

		public String getEstadoReal() {
			return this.EstadoReal;
		}

		public java.util.Date FEC_Fecha_Cierre;

		public java.util.Date getFEC_Fecha_Cierre() {
			return this.FEC_Fecha_Cierre;
		}

		public java.util.Date FEC_Fecha_Resolucion;

		public java.util.Date getFEC_Fecha_Resolucion() {
			return this.FEC_Fecha_Resolucion;
		}

		public java.util.Date FEC_Vencimiento_SLA;

		public java.util.Date getFEC_Vencimiento_SLA() {
			return this.FEC_Vencimiento_SLA;
		}

		public java.util.Date FHEnviadoServTecnico;

		public java.util.Date getFHEnviadoServTecnico() {
			return this.FHEnviadoServTecnico;
		}

		public java.util.Date FHEscaladoTerceros;

		public java.util.Date getFHEscaladoTerceros() {
			return this.FHEscaladoTerceros;
		}

		public java.util.Date FechaModificacion;

		public java.util.Date getFechaModificacion() {
			return this.FechaModificacion;
		}

		public java.util.Date FechaNivel1;

		public java.util.Date getFechaNivel1() {
			return this.FechaNivel1;
		}

		public java.util.Date Fecha_HoraIncidencia;

		public java.util.Date getFecha_HoraIncidencia() {
			return this.Fecha_HoraIncidencia;
		}

		public String GrupoResponsable;

		public String getGrupoResponsable() {
			return this.GrupoResponsable;
		}

		public String CausaR;

		public String getCausaR() {
			return this.CausaR;
		}

		public String ModificadaPor;

		public String getModificadaPor() {
			return this.ModificadaPor;
		}

		public String MotivoEstado;

		public String getMotivoEstado() {
			return this.MotivoEstado;
		}

		public String ProblemaR;

		public String getProblemaR() {
			return this.ProblemaR;
		}

		public String Prioridad;

		public String getPrioridad() {
			return this.Prioridad;
		}

		public String ReferenciaExterna;

		public String getReferenciaExterna() {
			return this.ReferenciaExterna;
		}

		public String Retipifica;

		public String getRetipifica() {
			return this.Retipifica;
		}

		public String SEL_FTTH_Pruebade;

		public String getSEL_FTTH_Pruebade() {
			return this.SEL_FTTH_Pruebade;
		}

		public String ServicioR;

		public String getServicioR() {
			return this.ServicioR;
		}

		public String ServicioI;

		public String getServicioI() {
			return this.ServicioI;
		}

		public String Severidad;

		public String getSeveridad() {
			return this.Severidad;
		}

		public String Sintoma;

		public String getSintoma() {
			return this.Sintoma;
		}

		public String SintomaI;

		public String getSintomaI() {
			return this.SintomaI;
		}

		public String SolucionAbreviada;

		public String getSolucionAbreviada() {
			return this.SolucionAbreviada;
		}

		public String SolucionDetallada;

		public String getSolucionDetallada() {
			return this.SolucionDetallada;
		}

		public String SolucionServicio;

		public String getSolucionServicio() {
			return this.SolucionServicio;
		}

		public String TempEstado;

		public String getTempEstado() {
			return this.TempEstado;
		}

		public String Tipo;

		public String getTipo() {
			return this.Tipo;
		}

		public String TomadaPorAgente;

		public String getTomadaPorAgente() {
			return this.TomadaPorAgente;
		}

		public String Servicio;

		public String getServicio() {
			return this.Servicio;
		}

		public String ViaEntradaTicket;

		public String getViaEntradaTicket() {
			return this.ViaEntradaTicket;
		}

		public String TomadaPorGrupo;

		public String getTomadaPorGrupo() {
			return this.TomadaPorGrupo;
		}

		public String N_Inc_Principal;

		public String getN_Inc_Principal() {
			return this.N_Inc_Principal;
		}

		public String TipoI;

		public String getTipoI() {
			return this.TipoI;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DATAWAREHOUSE_IncidenciasVivas.length) {
					if (length < 1024
							&& commonByteArray_DATAWAREHOUSE_IncidenciasVivas.length == 0) {
						commonByteArray_DATAWAREHOUSE_IncidenciasVivas = new byte[1024];
					} else {
						commonByteArray_DATAWAREHOUSE_IncidenciasVivas = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DATAWAREHOUSE_IncidenciasVivas,
						0, length);
				strReturn = new String(
						commonByteArray_DATAWAREHOUSE_IncidenciasVivas, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DATAWAREHOUSE_IncidenciasVivas) {

				try {

					int length = 0;

					this.Grupo = readString(dis);

					this.IDIncidencia = readString(dis);

					this.Status_History_Atendida_TIME = readDate(dis);

					this.CAR_FTTH_NumeroCTO = readString(dis);

					this.CAR_FTTH_Provincia = readString(dis);

					this.Estado = readString(dis);

					this.GrupoEscalada = readString(dis);

					this.CAR_ID_Cliente = readString(dis);

					this.Cliente = readString(dis);

					this.Apellidos = readString(dis);

					this.CAR_ID_Direccion = readString(dis);

					this.CAR_FTTH_Poblacion = readString(dis);

					this.CAR_FTTH_CodPostal = readString(dis);

					this.CAR_FTTH_Gescal37 = readString(dis);

					this.CAR_FTTH_IUA = readString(dis);

					this.CAR_FTTH_TipoCTO = readString(dis);

					this.CAR_FTTH_TelefonoServicio = readString(dis);

					this.CAR_FTTH_Numero = readString(dis);

					this.CAR_FTTH_PerfilServicio = readString(dis);

					this.Descripcion = readString(dis);

					this.DescripcionI = readString(dis);

					this.DescripcionProblema = readString(dis);

					this.EstadoProvision = readString(dis);

					this.EstadoReal = readString(dis);

					this.FEC_Fecha_Cierre = readDate(dis);

					this.FEC_Fecha_Resolucion = readDate(dis);

					this.FEC_Vencimiento_SLA = readDate(dis);

					this.FHEnviadoServTecnico = readDate(dis);

					this.FHEscaladoTerceros = readDate(dis);

					this.FechaModificacion = readDate(dis);

					this.FechaNivel1 = readDate(dis);

					this.Fecha_HoraIncidencia = readDate(dis);

					this.GrupoResponsable = readString(dis);

					this.CausaR = readString(dis);

					this.ModificadaPor = readString(dis);

					this.MotivoEstado = readString(dis);

					this.ProblemaR = readString(dis);

					this.Prioridad = readString(dis);

					this.ReferenciaExterna = readString(dis);

					this.Retipifica = readString(dis);

					this.SEL_FTTH_Pruebade = readString(dis);

					this.ServicioR = readString(dis);

					this.ServicioI = readString(dis);

					this.Severidad = readString(dis);

					this.Sintoma = readString(dis);

					this.SintomaI = readString(dis);

					this.SolucionAbreviada = readString(dis);

					this.SolucionDetallada = readString(dis);

					this.SolucionServicio = readString(dis);

					this.TempEstado = readString(dis);

					this.Tipo = readString(dis);

					this.TomadaPorAgente = readString(dis);

					this.Servicio = readString(dis);

					this.ViaEntradaTicket = readString(dis);

					this.TomadaPorGrupo = readString(dis);

					this.N_Inc_Principal = readString(dis);

					this.TipoI = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Grupo, dos);

				// String

				writeString(this.IDIncidencia, dos);

				// java.util.Date

				writeDate(this.Status_History_Atendida_TIME, dos);

				// String

				writeString(this.CAR_FTTH_NumeroCTO, dos);

				// String

				writeString(this.CAR_FTTH_Provincia, dos);

				// String

				writeString(this.Estado, dos);

				// String

				writeString(this.GrupoEscalada, dos);

				// String

				writeString(this.CAR_ID_Cliente, dos);

				// String

				writeString(this.Cliente, dos);

				// String

				writeString(this.Apellidos, dos);

				// String

				writeString(this.CAR_ID_Direccion, dos);

				// String

				writeString(this.CAR_FTTH_Poblacion, dos);

				// String

				writeString(this.CAR_FTTH_CodPostal, dos);

				// String

				writeString(this.CAR_FTTH_Gescal37, dos);

				// String

				writeString(this.CAR_FTTH_IUA, dos);

				// String

				writeString(this.CAR_FTTH_TipoCTO, dos);

				// String

				writeString(this.CAR_FTTH_TelefonoServicio, dos);

				// String

				writeString(this.CAR_FTTH_Numero, dos);

				// String

				writeString(this.CAR_FTTH_PerfilServicio, dos);

				// String

				writeString(this.Descripcion, dos);

				// String

				writeString(this.DescripcionI, dos);

				// String

				writeString(this.DescripcionProblema, dos);

				// String

				writeString(this.EstadoProvision, dos);

				// String

				writeString(this.EstadoReal, dos);

				// java.util.Date

				writeDate(this.FEC_Fecha_Cierre, dos);

				// java.util.Date

				writeDate(this.FEC_Fecha_Resolucion, dos);

				// java.util.Date

				writeDate(this.FEC_Vencimiento_SLA, dos);

				// java.util.Date

				writeDate(this.FHEnviadoServTecnico, dos);

				// java.util.Date

				writeDate(this.FHEscaladoTerceros, dos);

				// java.util.Date

				writeDate(this.FechaModificacion, dos);

				// java.util.Date

				writeDate(this.FechaNivel1, dos);

				// java.util.Date

				writeDate(this.Fecha_HoraIncidencia, dos);

				// String

				writeString(this.GrupoResponsable, dos);

				// String

				writeString(this.CausaR, dos);

				// String

				writeString(this.ModificadaPor, dos);

				// String

				writeString(this.MotivoEstado, dos);

				// String

				writeString(this.ProblemaR, dos);

				// String

				writeString(this.Prioridad, dos);

				// String

				writeString(this.ReferenciaExterna, dos);

				// String

				writeString(this.Retipifica, dos);

				// String

				writeString(this.SEL_FTTH_Pruebade, dos);

				// String

				writeString(this.ServicioR, dos);

				// String

				writeString(this.ServicioI, dos);

				// String

				writeString(this.Severidad, dos);

				// String

				writeString(this.Sintoma, dos);

				// String

				writeString(this.SintomaI, dos);

				// String

				writeString(this.SolucionAbreviada, dos);

				// String

				writeString(this.SolucionDetallada, dos);

				// String

				writeString(this.SolucionServicio, dos);

				// String

				writeString(this.TempEstado, dos);

				// String

				writeString(this.Tipo, dos);

				// String

				writeString(this.TomadaPorAgente, dos);

				// String

				writeString(this.Servicio, dos);

				// String

				writeString(this.ViaEntradaTicket, dos);

				// String

				writeString(this.TomadaPorGrupo, dos);

				// String

				writeString(this.N_Inc_Principal, dos);

				// String

				writeString(this.TipoI, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Grupo=" + Grupo);
			sb.append(",IDIncidencia=" + IDIncidencia);
			sb.append(",Status_History_Atendida_TIME="
					+ String.valueOf(Status_History_Atendida_TIME));
			sb.append(",CAR_FTTH_NumeroCTO=" + CAR_FTTH_NumeroCTO);
			sb.append(",CAR_FTTH_Provincia=" + CAR_FTTH_Provincia);
			sb.append(",Estado=" + Estado);
			sb.append(",GrupoEscalada=" + GrupoEscalada);
			sb.append(",CAR_ID_Cliente=" + CAR_ID_Cliente);
			sb.append(",Cliente=" + Cliente);
			sb.append(",Apellidos=" + Apellidos);
			sb.append(",CAR_ID_Direccion=" + CAR_ID_Direccion);
			sb.append(",CAR_FTTH_Poblacion=" + CAR_FTTH_Poblacion);
			sb.append(",CAR_FTTH_CodPostal=" + CAR_FTTH_CodPostal);
			sb.append(",CAR_FTTH_Gescal37=" + CAR_FTTH_Gescal37);
			sb.append(",CAR_FTTH_IUA=" + CAR_FTTH_IUA);
			sb.append(",CAR_FTTH_TipoCTO=" + CAR_FTTH_TipoCTO);
			sb.append(",CAR_FTTH_TelefonoServicio=" + CAR_FTTH_TelefonoServicio);
			sb.append(",CAR_FTTH_Numero=" + CAR_FTTH_Numero);
			sb.append(",CAR_FTTH_PerfilServicio=" + CAR_FTTH_PerfilServicio);
			sb.append(",Descripcion=" + Descripcion);
			sb.append(",DescripcionI=" + DescripcionI);
			sb.append(",DescripcionProblema=" + DescripcionProblema);
			sb.append(",EstadoProvision=" + EstadoProvision);
			sb.append(",EstadoReal=" + EstadoReal);
			sb.append(",FEC_Fecha_Cierre=" + String.valueOf(FEC_Fecha_Cierre));
			sb.append(",FEC_Fecha_Resolucion="
					+ String.valueOf(FEC_Fecha_Resolucion));
			sb.append(",FEC_Vencimiento_SLA="
					+ String.valueOf(FEC_Vencimiento_SLA));
			sb.append(",FHEnviadoServTecnico="
					+ String.valueOf(FHEnviadoServTecnico));
			sb.append(",FHEscaladoTerceros="
					+ String.valueOf(FHEscaladoTerceros));
			sb.append(",FechaModificacion=" + String.valueOf(FechaModificacion));
			sb.append(",FechaNivel1=" + String.valueOf(FechaNivel1));
			sb.append(",Fecha_HoraIncidencia="
					+ String.valueOf(Fecha_HoraIncidencia));
			sb.append(",GrupoResponsable=" + GrupoResponsable);
			sb.append(",CausaR=" + CausaR);
			sb.append(",ModificadaPor=" + ModificadaPor);
			sb.append(",MotivoEstado=" + MotivoEstado);
			sb.append(",ProblemaR=" + ProblemaR);
			sb.append(",Prioridad=" + Prioridad);
			sb.append(",ReferenciaExterna=" + ReferenciaExterna);
			sb.append(",Retipifica=" + Retipifica);
			sb.append(",SEL_FTTH_Pruebade=" + SEL_FTTH_Pruebade);
			sb.append(",ServicioR=" + ServicioR);
			sb.append(",ServicioI=" + ServicioI);
			sb.append(",Severidad=" + Severidad);
			sb.append(",Sintoma=" + Sintoma);
			sb.append(",SintomaI=" + SintomaI);
			sb.append(",SolucionAbreviada=" + SolucionAbreviada);
			sb.append(",SolucionDetallada=" + SolucionDetallada);
			sb.append(",SolucionServicio=" + SolucionServicio);
			sb.append(",TempEstado=" + TempEstado);
			sb.append(",Tipo=" + Tipo);
			sb.append(",TomadaPorAgente=" + TomadaPorAgente);
			sb.append(",Servicio=" + Servicio);
			sb.append(",ViaEntradaTicket=" + ViaEntradaTicket);
			sb.append(",TomadaPorGrupo=" + TomadaPorGrupo);
			sb.append(",N_Inc_Principal=" + N_Inc_Principal);
			sb.append(",TipoI=" + TipoI);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_DATAWAREHOUSE_IncidenciasVivas = new byte[0];
		static byte[] commonByteArray_DATAWAREHOUSE_IncidenciasVivas = new byte[0];

		public String Grupo;

		public String getGrupo() {
			return this.Grupo;
		}

		public String IDIncidencia;

		public String getIDIncidencia() {
			return this.IDIncidencia;
		}

		public java.util.Date Status_History_Atendida_TIME;

		public java.util.Date getStatus_History_Atendida_TIME() {
			return this.Status_History_Atendida_TIME;
		}

		public String CAR_FTTH_NumeroCTO;

		public String getCAR_FTTH_NumeroCTO() {
			return this.CAR_FTTH_NumeroCTO;
		}

		public String CAR_FTTH_Provincia;

		public String getCAR_FTTH_Provincia() {
			return this.CAR_FTTH_Provincia;
		}

		public String Estado;

		public String getEstado() {
			return this.Estado;
		}

		public String GrupoEscalada;

		public String getGrupoEscalada() {
			return this.GrupoEscalada;
		}

		public String CAR_ID_Cliente;

		public String getCAR_ID_Cliente() {
			return this.CAR_ID_Cliente;
		}

		public String Cliente;

		public String getCliente() {
			return this.Cliente;
		}

		public String Apellidos;

		public String getApellidos() {
			return this.Apellidos;
		}

		public String CAR_ID_Direccion;

		public String getCAR_ID_Direccion() {
			return this.CAR_ID_Direccion;
		}

		public String CAR_FTTH_Poblacion;

		public String getCAR_FTTH_Poblacion() {
			return this.CAR_FTTH_Poblacion;
		}

		public String CAR_FTTH_CodPostal;

		public String getCAR_FTTH_CodPostal() {
			return this.CAR_FTTH_CodPostal;
		}

		public String CAR_FTTH_Gescal37;

		public String getCAR_FTTH_Gescal37() {
			return this.CAR_FTTH_Gescal37;
		}

		public String CAR_FTTH_IUA;

		public String getCAR_FTTH_IUA() {
			return this.CAR_FTTH_IUA;
		}

		public String CAR_FTTH_TipoCTO;

		public String getCAR_FTTH_TipoCTO() {
			return this.CAR_FTTH_TipoCTO;
		}

		public String CAR_FTTH_TelefonoServicio;

		public String getCAR_FTTH_TelefonoServicio() {
			return this.CAR_FTTH_TelefonoServicio;
		}

		public String CAR_FTTH_Numero;

		public String getCAR_FTTH_Numero() {
			return this.CAR_FTTH_Numero;
		}

		public String CAR_FTTH_PerfilServicio;

		public String getCAR_FTTH_PerfilServicio() {
			return this.CAR_FTTH_PerfilServicio;
		}

		public String Descripcion;

		public String getDescripcion() {
			return this.Descripcion;
		}

		public String DescripcionI;

		public String getDescripcionI() {
			return this.DescripcionI;
		}

		public String DescripcionProblema;

		public String getDescripcionProblema() {
			return this.DescripcionProblema;
		}

		public String EstadoProvision;

		public String getEstadoProvision() {
			return this.EstadoProvision;
		}

		public String EstadoReal;

		public String getEstadoReal() {
			return this.EstadoReal;
		}

		public java.util.Date FEC_Fecha_Cierre;

		public java.util.Date getFEC_Fecha_Cierre() {
			return this.FEC_Fecha_Cierre;
		}

		public java.util.Date FEC_Fecha_Resolucion;

		public java.util.Date getFEC_Fecha_Resolucion() {
			return this.FEC_Fecha_Resolucion;
		}

		public java.util.Date FEC_Vencimiento_SLA;

		public java.util.Date getFEC_Vencimiento_SLA() {
			return this.FEC_Vencimiento_SLA;
		}

		public java.util.Date FHEnviadoServTecnico;

		public java.util.Date getFHEnviadoServTecnico() {
			return this.FHEnviadoServTecnico;
		}

		public java.util.Date FHEscaladoTerceros;

		public java.util.Date getFHEscaladoTerceros() {
			return this.FHEscaladoTerceros;
		}

		public java.util.Date FechaModificacion;

		public java.util.Date getFechaModificacion() {
			return this.FechaModificacion;
		}

		public java.util.Date FechaNivel1;

		public java.util.Date getFechaNivel1() {
			return this.FechaNivel1;
		}

		public java.util.Date Fecha_HoraIncidencia;

		public java.util.Date getFecha_HoraIncidencia() {
			return this.Fecha_HoraIncidencia;
		}

		public String GrupoResponsable;

		public String getGrupoResponsable() {
			return this.GrupoResponsable;
		}

		public String CausaR;

		public String getCausaR() {
			return this.CausaR;
		}

		public String ModificadaPor;

		public String getModificadaPor() {
			return this.ModificadaPor;
		}

		public String MotivoEstado;

		public String getMotivoEstado() {
			return this.MotivoEstado;
		}

		public String ProblemaR;

		public String getProblemaR() {
			return this.ProblemaR;
		}

		public String Prioridad;

		public String getPrioridad() {
			return this.Prioridad;
		}

		public String ReferenciaExterna;

		public String getReferenciaExterna() {
			return this.ReferenciaExterna;
		}

		public String Retipifica;

		public String getRetipifica() {
			return this.Retipifica;
		}

		public String SEL_FTTH_Pruebade;

		public String getSEL_FTTH_Pruebade() {
			return this.SEL_FTTH_Pruebade;
		}

		public String ServicioR;

		public String getServicioR() {
			return this.ServicioR;
		}

		public String ServicioI;

		public String getServicioI() {
			return this.ServicioI;
		}

		public String Severidad;

		public String getSeveridad() {
			return this.Severidad;
		}

		public String Sintoma;

		public String getSintoma() {
			return this.Sintoma;
		}

		public String SintomaI;

		public String getSintomaI() {
			return this.SintomaI;
		}

		public String SolucionAbreviada;

		public String getSolucionAbreviada() {
			return this.SolucionAbreviada;
		}

		public String SolucionDetallada;

		public String getSolucionDetallada() {
			return this.SolucionDetallada;
		}

		public String SolucionServicio;

		public String getSolucionServicio() {
			return this.SolucionServicio;
		}

		public String TempEstado;

		public String getTempEstado() {
			return this.TempEstado;
		}

		public String Tipo;

		public String getTipo() {
			return this.Tipo;
		}

		public String TomadaPorAgente;

		public String getTomadaPorAgente() {
			return this.TomadaPorAgente;
		}

		public String Servicio;

		public String getServicio() {
			return this.Servicio;
		}

		public String ViaEntradaTicket;

		public String getViaEntradaTicket() {
			return this.ViaEntradaTicket;
		}

		public String TomadaPorGrupo;

		public String getTomadaPorGrupo() {
			return this.TomadaPorGrupo;
		}

		public String N_Inc_Principal;

		public String getN_Inc_Principal() {
			return this.N_Inc_Principal;
		}

		public String TipoI;

		public String getTipoI() {
			return this.TipoI;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DATAWAREHOUSE_IncidenciasVivas.length) {
					if (length < 1024
							&& commonByteArray_DATAWAREHOUSE_IncidenciasVivas.length == 0) {
						commonByteArray_DATAWAREHOUSE_IncidenciasVivas = new byte[1024];
					} else {
						commonByteArray_DATAWAREHOUSE_IncidenciasVivas = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DATAWAREHOUSE_IncidenciasVivas,
						0, length);
				strReturn = new String(
						commonByteArray_DATAWAREHOUSE_IncidenciasVivas, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DATAWAREHOUSE_IncidenciasVivas) {

				try {

					int length = 0;

					this.Grupo = readString(dis);

					this.IDIncidencia = readString(dis);

					this.Status_History_Atendida_TIME = readDate(dis);

					this.CAR_FTTH_NumeroCTO = readString(dis);

					this.CAR_FTTH_Provincia = readString(dis);

					this.Estado = readString(dis);

					this.GrupoEscalada = readString(dis);

					this.CAR_ID_Cliente = readString(dis);

					this.Cliente = readString(dis);

					this.Apellidos = readString(dis);

					this.CAR_ID_Direccion = readString(dis);

					this.CAR_FTTH_Poblacion = readString(dis);

					this.CAR_FTTH_CodPostal = readString(dis);

					this.CAR_FTTH_Gescal37 = readString(dis);

					this.CAR_FTTH_IUA = readString(dis);

					this.CAR_FTTH_TipoCTO = readString(dis);

					this.CAR_FTTH_TelefonoServicio = readString(dis);

					this.CAR_FTTH_Numero = readString(dis);

					this.CAR_FTTH_PerfilServicio = readString(dis);

					this.Descripcion = readString(dis);

					this.DescripcionI = readString(dis);

					this.DescripcionProblema = readString(dis);

					this.EstadoProvision = readString(dis);

					this.EstadoReal = readString(dis);

					this.FEC_Fecha_Cierre = readDate(dis);

					this.FEC_Fecha_Resolucion = readDate(dis);

					this.FEC_Vencimiento_SLA = readDate(dis);

					this.FHEnviadoServTecnico = readDate(dis);

					this.FHEscaladoTerceros = readDate(dis);

					this.FechaModificacion = readDate(dis);

					this.FechaNivel1 = readDate(dis);

					this.Fecha_HoraIncidencia = readDate(dis);

					this.GrupoResponsable = readString(dis);

					this.CausaR = readString(dis);

					this.ModificadaPor = readString(dis);

					this.MotivoEstado = readString(dis);

					this.ProblemaR = readString(dis);

					this.Prioridad = readString(dis);

					this.ReferenciaExterna = readString(dis);

					this.Retipifica = readString(dis);

					this.SEL_FTTH_Pruebade = readString(dis);

					this.ServicioR = readString(dis);

					this.ServicioI = readString(dis);

					this.Severidad = readString(dis);

					this.Sintoma = readString(dis);

					this.SintomaI = readString(dis);

					this.SolucionAbreviada = readString(dis);

					this.SolucionDetallada = readString(dis);

					this.SolucionServicio = readString(dis);

					this.TempEstado = readString(dis);

					this.Tipo = readString(dis);

					this.TomadaPorAgente = readString(dis);

					this.Servicio = readString(dis);

					this.ViaEntradaTicket = readString(dis);

					this.TomadaPorGrupo = readString(dis);

					this.N_Inc_Principal = readString(dis);

					this.TipoI = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Grupo, dos);

				// String

				writeString(this.IDIncidencia, dos);

				// java.util.Date

				writeDate(this.Status_History_Atendida_TIME, dos);

				// String

				writeString(this.CAR_FTTH_NumeroCTO, dos);

				// String

				writeString(this.CAR_FTTH_Provincia, dos);

				// String

				writeString(this.Estado, dos);

				// String

				writeString(this.GrupoEscalada, dos);

				// String

				writeString(this.CAR_ID_Cliente, dos);

				// String

				writeString(this.Cliente, dos);

				// String

				writeString(this.Apellidos, dos);

				// String

				writeString(this.CAR_ID_Direccion, dos);

				// String

				writeString(this.CAR_FTTH_Poblacion, dos);

				// String

				writeString(this.CAR_FTTH_CodPostal, dos);

				// String

				writeString(this.CAR_FTTH_Gescal37, dos);

				// String

				writeString(this.CAR_FTTH_IUA, dos);

				// String

				writeString(this.CAR_FTTH_TipoCTO, dos);

				// String

				writeString(this.CAR_FTTH_TelefonoServicio, dos);

				// String

				writeString(this.CAR_FTTH_Numero, dos);

				// String

				writeString(this.CAR_FTTH_PerfilServicio, dos);

				// String

				writeString(this.Descripcion, dos);

				// String

				writeString(this.DescripcionI, dos);

				// String

				writeString(this.DescripcionProblema, dos);

				// String

				writeString(this.EstadoProvision, dos);

				// String

				writeString(this.EstadoReal, dos);

				// java.util.Date

				writeDate(this.FEC_Fecha_Cierre, dos);

				// java.util.Date

				writeDate(this.FEC_Fecha_Resolucion, dos);

				// java.util.Date

				writeDate(this.FEC_Vencimiento_SLA, dos);

				// java.util.Date

				writeDate(this.FHEnviadoServTecnico, dos);

				// java.util.Date

				writeDate(this.FHEscaladoTerceros, dos);

				// java.util.Date

				writeDate(this.FechaModificacion, dos);

				// java.util.Date

				writeDate(this.FechaNivel1, dos);

				// java.util.Date

				writeDate(this.Fecha_HoraIncidencia, dos);

				// String

				writeString(this.GrupoResponsable, dos);

				// String

				writeString(this.CausaR, dos);

				// String

				writeString(this.ModificadaPor, dos);

				// String

				writeString(this.MotivoEstado, dos);

				// String

				writeString(this.ProblemaR, dos);

				// String

				writeString(this.Prioridad, dos);

				// String

				writeString(this.ReferenciaExterna, dos);

				// String

				writeString(this.Retipifica, dos);

				// String

				writeString(this.SEL_FTTH_Pruebade, dos);

				// String

				writeString(this.ServicioR, dos);

				// String

				writeString(this.ServicioI, dos);

				// String

				writeString(this.Severidad, dos);

				// String

				writeString(this.Sintoma, dos);

				// String

				writeString(this.SintomaI, dos);

				// String

				writeString(this.SolucionAbreviada, dos);

				// String

				writeString(this.SolucionDetallada, dos);

				// String

				writeString(this.SolucionServicio, dos);

				// String

				writeString(this.TempEstado, dos);

				// String

				writeString(this.Tipo, dos);

				// String

				writeString(this.TomadaPorAgente, dos);

				// String

				writeString(this.Servicio, dos);

				// String

				writeString(this.ViaEntradaTicket, dos);

				// String

				writeString(this.TomadaPorGrupo, dos);

				// String

				writeString(this.N_Inc_Principal, dos);

				// String

				writeString(this.TipoI, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Grupo=" + Grupo);
			sb.append(",IDIncidencia=" + IDIncidencia);
			sb.append(",Status_History_Atendida_TIME="
					+ String.valueOf(Status_History_Atendida_TIME));
			sb.append(",CAR_FTTH_NumeroCTO=" + CAR_FTTH_NumeroCTO);
			sb.append(",CAR_FTTH_Provincia=" + CAR_FTTH_Provincia);
			sb.append(",Estado=" + Estado);
			sb.append(",GrupoEscalada=" + GrupoEscalada);
			sb.append(",CAR_ID_Cliente=" + CAR_ID_Cliente);
			sb.append(",Cliente=" + Cliente);
			sb.append(",Apellidos=" + Apellidos);
			sb.append(",CAR_ID_Direccion=" + CAR_ID_Direccion);
			sb.append(",CAR_FTTH_Poblacion=" + CAR_FTTH_Poblacion);
			sb.append(",CAR_FTTH_CodPostal=" + CAR_FTTH_CodPostal);
			sb.append(",CAR_FTTH_Gescal37=" + CAR_FTTH_Gescal37);
			sb.append(",CAR_FTTH_IUA=" + CAR_FTTH_IUA);
			sb.append(",CAR_FTTH_TipoCTO=" + CAR_FTTH_TipoCTO);
			sb.append(",CAR_FTTH_TelefonoServicio=" + CAR_FTTH_TelefonoServicio);
			sb.append(",CAR_FTTH_Numero=" + CAR_FTTH_Numero);
			sb.append(",CAR_FTTH_PerfilServicio=" + CAR_FTTH_PerfilServicio);
			sb.append(",Descripcion=" + Descripcion);
			sb.append(",DescripcionI=" + DescripcionI);
			sb.append(",DescripcionProblema=" + DescripcionProblema);
			sb.append(",EstadoProvision=" + EstadoProvision);
			sb.append(",EstadoReal=" + EstadoReal);
			sb.append(",FEC_Fecha_Cierre=" + String.valueOf(FEC_Fecha_Cierre));
			sb.append(",FEC_Fecha_Resolucion="
					+ String.valueOf(FEC_Fecha_Resolucion));
			sb.append(",FEC_Vencimiento_SLA="
					+ String.valueOf(FEC_Vencimiento_SLA));
			sb.append(",FHEnviadoServTecnico="
					+ String.valueOf(FHEnviadoServTecnico));
			sb.append(",FHEscaladoTerceros="
					+ String.valueOf(FHEscaladoTerceros));
			sb.append(",FechaModificacion=" + String.valueOf(FechaModificacion));
			sb.append(",FechaNivel1=" + String.valueOf(FechaNivel1));
			sb.append(",Fecha_HoraIncidencia="
					+ String.valueOf(Fecha_HoraIncidencia));
			sb.append(",GrupoResponsable=" + GrupoResponsable);
			sb.append(",CausaR=" + CausaR);
			sb.append(",ModificadaPor=" + ModificadaPor);
			sb.append(",MotivoEstado=" + MotivoEstado);
			sb.append(",ProblemaR=" + ProblemaR);
			sb.append(",Prioridad=" + Prioridad);
			sb.append(",ReferenciaExterna=" + ReferenciaExterna);
			sb.append(",Retipifica=" + Retipifica);
			sb.append(",SEL_FTTH_Pruebade=" + SEL_FTTH_Pruebade);
			sb.append(",ServicioR=" + ServicioR);
			sb.append(",ServicioI=" + ServicioI);
			sb.append(",Severidad=" + Severidad);
			sb.append(",Sintoma=" + Sintoma);
			sb.append(",SintomaI=" + SintomaI);
			sb.append(",SolucionAbreviada=" + SolucionAbreviada);
			sb.append(",SolucionDetallada=" + SolucionDetallada);
			sb.append(",SolucionServicio=" + SolucionServicio);
			sb.append(",TempEstado=" + TempEstado);
			sb.append(",Tipo=" + Tipo);
			sb.append(",TomadaPorAgente=" + TomadaPorAgente);
			sb.append(",Servicio=" + Servicio);
			sb.append(",ViaEntradaTicket=" + ViaEntradaTicket);
			sb.append(",TomadaPorGrupo=" + TomadaPorGrupo);
			sb.append(",N_Inc_Principal=" + N_Inc_Principal);
			sb.append(",TipoI=" + TipoI);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				row3Struct row3 = new row3Struct();
				row2Struct row2 = new row2Struct();

				/**
				 * [tMSSqlOutput_1 begin ] start
				 */

				ok_Hash.put("tMSSqlOutput_1", false);
				start_Hash.put("tMSSqlOutput_1", System.currentTimeMillis());

				currentComponent = "tMSSqlOutput_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);

					}
				}

				int tos_count_tMSSqlOutput_1 = 0;

				int nb_line_tMSSqlOutput_1 = 0;
				int nb_line_update_tMSSqlOutput_1 = 0;
				int nb_line_inserted_tMSSqlOutput_1 = 0;
				int nb_line_deleted_tMSSqlOutput_1 = 0;
				int nb_line_rejected_tMSSqlOutput_1 = 0;

				int deletedCount_tMSSqlOutput_1 = 0;
				int updatedCount_tMSSqlOutput_1 = 0;
				int insertedCount_tMSSqlOutput_1 = 0;
				int rejectedCount_tMSSqlOutput_1 = 0;
				String dbschema_tMSSqlOutput_1 = null;
				String tableName_tMSSqlOutput_1 = null;
				boolean whetherReject_tMSSqlOutput_1 = false;

				java.util.Calendar calendar_tMSSqlOutput_1 = java.util.Calendar
						.getInstance();
				long year1_tMSSqlOutput_1 = TalendDate.parseDate("yyyy-MM-dd",
						"0001-01-01").getTime();
				long year2_tMSSqlOutput_1 = TalendDate.parseDate("yyyy-MM-dd",
						"1753-01-01").getTime();
				long year10000_tMSSqlOutput_1 = TalendDate.parseDate(
						"yyyy-MM-dd HH:mm:ss", "9999-12-31 24:00:00").getTime();
				long date_tMSSqlOutput_1;

				java.util.Calendar calendar_datetimeoffset_tMSSqlOutput_1 = java.util.Calendar
						.getInstance(java.util.TimeZone.getTimeZone("UTC"));

				java.sql.Connection conn_tMSSqlOutput_1 = null;
				String dbUser_tMSSqlOutput_1 = null;
				dbschema_tMSSqlOutput_1 = "dbo";
				String driverClass_tMSSqlOutput_1 = "net.sourceforge.jtds.jdbc.Driver";

				java.lang.Class.forName(driverClass_tMSSqlOutput_1);
				String port_tMSSqlOutput_1 = "1433";
				String dbname_tMSSqlOutput_1 = "Remedy";
				String url_tMSSqlOutput_1 = "jdbc:jtds:sqlserver://"
						+ "MXMESCF02";
				if (!"".equals(port_tMSSqlOutput_1)) {
					url_tMSSqlOutput_1 += ":" + "1433";
				}
				if (!"".equals(dbname_tMSSqlOutput_1)) {
					url_tMSSqlOutput_1 += "//" + "Remedy";

				}
				url_tMSSqlOutput_1 += ";appName=" + projectName + ";" + "";
				dbUser_tMSSqlOutput_1 = "DST_ADM";

				final String decryptedPassword_tMSSqlOutput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("9ef1eafe0b3d3c1c25206238d3e3ad11");

				String dbPwd_tMSSqlOutput_1 = decryptedPassword_tMSSqlOutput_1;
				conn_tMSSqlOutput_1 = java.sql.DriverManager.getConnection(
						url_tMSSqlOutput_1, dbUser_tMSSqlOutput_1,
						dbPwd_tMSSqlOutput_1);

				resourceMap.put("conn_tMSSqlOutput_1", conn_tMSSqlOutput_1);

				conn_tMSSqlOutput_1.setAutoCommit(false);
				int commitEvery_tMSSqlOutput_1 = 10000;
				int commitCounter_tMSSqlOutput_1 = 0;

				int batchSize_tMSSqlOutput_1 = 10000;
				int batchSizeCounter_tMSSqlOutput_1 = 0;

				if (dbschema_tMSSqlOutput_1 == null
						|| dbschema_tMSSqlOutput_1.trim().length() == 0) {
					tableName_tMSSqlOutput_1 = "INCIDENCIAS_Vivas";
				} else {
					tableName_tMSSqlOutput_1 = dbschema_tMSSqlOutput_1 + "].["
							+ "INCIDENCIAS_Vivas";
				}
				int count_tMSSqlOutput_1 = 0;

				try (java.sql.Statement stmtClear_tMSSqlOutput_1 = conn_tMSSqlOutput_1
						.createStatement()) {
					stmtClear_tMSSqlOutput_1.executeUpdate("DELETE FROM ["
							+ tableName_tMSSqlOutput_1 + "]");
				}
				String insert_tMSSqlOutput_1 = "INSERT INTO ["
						+ tableName_tMSSqlOutput_1
						+ "] ([Grupo],[IDIncidencia],[Status_History_Atendida_TIME],[CAR_FTTH_NumeroCTO],[CAR_FTTH_Provincia],[Estado],[GrupoEscalada],[CAR_ID_Cliente],[Cliente],[Apellidos],[CAR_ID_Direccion],[CAR_FTTH_Poblacion],[CAR_FTTH_CodPostal],[CAR_FTTH_Gescal37],[CAR_FTTH_IUA],[CAR_FTTH_TipoCTO],[CAR_FTTH_TelefonoServicio],[CAR_FTTH_Numero],[CAR_FTTH_PerfilServicio],[Descripcion],[DescripcionI],[DescripcionProblema],[EstadoProvision],[EstadoReal],[FEC_Fecha_Cierre],[FEC_Fecha_Resolucion],[FEC_Vencimiento_SLA],[FHEnviadoServTecnico],[FHEscaladoTerceros],[FechaModificacion],[FechaNivel1],[Fecha_HoraIncidencia],[GrupoResponsable],[CausaR],[ModificadaPor],[MotivoEstado],[ProblemaR],[Prioridad],[ReferenciaExterna],[Retipifica],[SEL_FTTH_Pruebade],[ServicioR],[ServicioI],[Severidad],[Sintoma],[SintomaI],[SolucionAbreviada],[SolucionDetallada],[SolucionServicio],[TempEstado],[Tipo],[TomadaPorAgente],[Servicio],[ViaEntradaTicket],[TomadaPorGrupo],[N_Inc_Principal],[TipoI]) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tMSSqlOutput_1 = conn_tMSSqlOutput_1
						.prepareStatement(insert_tMSSqlOutput_1);
				resourceMap.put("pstmt_tMSSqlOutput_1", pstmt_tMSSqlOutput_1);

				/**
				 * [tMSSqlOutput_1 begin ] stop
				 */

				/**
				 * [tUniqRow_1 begin ] start
				 */

				ok_Hash.put("tUniqRow_1", false);
				start_Hash.put("tUniqRow_1", System.currentTimeMillis());

				currentComponent = "tUniqRow_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);

					}
				}

				int tos_count_tUniqRow_1 = 0;

				class KeyStruct_tUniqRow_1 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String IDIncidencia;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.IDIncidencia == null) ? 0
											: this.IDIncidencia.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_1 other = (KeyStruct_tUniqRow_1) obj;

						if (this.IDIncidencia == null) {
							if (other.IDIncidencia != null)
								return false;

						} else if (!this.IDIncidencia
								.equals(other.IDIncidencia))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_1 = 0;
				int nb_duplicates_tUniqRow_1 = 0;
				KeyStruct_tUniqRow_1 finder_tUniqRow_1 = new KeyStruct_tUniqRow_1();
				java.util.Set<KeyStruct_tUniqRow_1> keystUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>();

				/**
				 * [tUniqRow_1 begin ] stop
				 */

				/**
				 * [tConvertType_1 begin ] start
				 */

				ok_Hash.put("tConvertType_1", false);
				start_Hash.put("tConvertType_1", System.currentTimeMillis());

				currentComponent = "tConvertType_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

					}
				}

				int tos_count_tConvertType_1 = 0;

				int nb_line_tConvertType_1 = 0;

				/**
				 * [tConvertType_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				try {

					Object filename_tFileInputDelimited_1 = "C:/Automaticos/Remedy/IncidenciasVivas.txt";
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0
								|| random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								"C:/Automaticos/Remedy/IncidenciasVivas.txt",
								"ISO-8859-15", "|", "\n", false, 1, 0, -1, -1,
								false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null
							&& fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();

						row1 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row1 = new row1Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_1 = 0;

							row1.Grupo = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 1;

							row1.IDIncidencia = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 2;

							temp = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Status_History_Atendida_TIME = ParserUtils
											.parseTo_Date(temp,
													"yyyy-MM-dd HH:mm:ss.SSS");

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1
											.setException(new RuntimeException(
													String.format(
															"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Status_History_Atendida_TIME",
															"row1", temp,
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
								}

							} else {

								row1.Status_History_Atendida_TIME = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 3;

							row1.CAR_FTTH_NumeroCTO = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 4;

							row1.CAR_FTTH_Provincia = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 5;

							row1.Estado = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 6;

							row1.GrupoEscalada = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 7;

							row1.CAR_ID_Cliente = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 8;

							row1.Cliente = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 9;

							row1.Apellidos = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 10;

							row1.CAR_ID_Direccion = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 11;

							row1.CAR_FTTH_Poblacion = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 12;

							row1.CAR_FTTH_CodPostal = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 13;

							row1.CAR_FTTH_Gescal37 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 14;

							row1.CAR_FTTH_IUA = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 15;

							row1.CAR_FTTH_TipoCTO = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 16;

							row1.CAR_FTTH_TelefonoServicio = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 17;

							row1.CAR_FTTH_Numero = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 18;

							row1.CAR_FTTH_PerfilServicio = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 19;

							row1.Descripcion = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 20;

							row1.DescripcionI = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 21;

							row1.DescripcionProblema = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 22;

							row1.EstadoProvision = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 23;

							row1.EstadoReal = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 24;

							temp = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.FEC_Fecha_Cierre = ParserUtils
											.parseTo_Date(temp,
													"yyyy-MM-dd HH:mm:ss.SSS");

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1
											.setException(new RuntimeException(
													String.format(
															"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"FEC_Fecha_Cierre",
															"row1", temp,
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
								}

							} else {

								row1.FEC_Fecha_Cierre = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 25;

							temp = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.FEC_Fecha_Resolucion = ParserUtils
											.parseTo_Date(temp,
													"yyyy-MM-dd HH:mm:ss.SSS");

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1
											.setException(new RuntimeException(
													String.format(
															"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"FEC_Fecha_Resolucion",
															"row1", temp,
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
								}

							} else {

								row1.FEC_Fecha_Resolucion = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 26;

							temp = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.FEC_Vencimiento_SLA = ParserUtils
											.parseTo_Date(temp,
													"yyyy-MM-dd HH:mm:ss.SSS");

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1
											.setException(new RuntimeException(
													String.format(
															"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"FEC_Vencimiento_SLA",
															"row1", temp,
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
								}

							} else {

								row1.FEC_Vencimiento_SLA = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 27;

							temp = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.FHEnviadoServTecnico = ParserUtils
											.parseTo_Date(temp,
													"yyyy-MM-dd HH:mm:ss.SSS");

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1
											.setException(new RuntimeException(
													String.format(
															"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"FHEnviadoServTecnico",
															"row1", temp,
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
								}

							} else {

								row1.FHEnviadoServTecnico = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 28;

							temp = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.FHEscaladoTerceros = ParserUtils
											.parseTo_Date(temp,
													"yyyy-MM-dd HH:mm:ss.SSS");

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1
											.setException(new RuntimeException(
													String.format(
															"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"FHEscaladoTerceros",
															"row1", temp,
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
								}

							} else {

								row1.FHEscaladoTerceros = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 29;

							temp = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.FechaModificacion = ParserUtils
											.parseTo_Date(temp,
													"yyyy-MM-dd HH:mm:ss.SSS");

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1
											.setException(new RuntimeException(
													String.format(
															"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"FechaModificacion",
															"row1", temp,
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
								}

							} else {

								row1.FechaModificacion = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 30;

							temp = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.FechaNivel1 = ParserUtils
											.parseTo_Date(temp,
													"yyyy-MM-dd HH:mm:ss.SSS");

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1
											.setException(new RuntimeException(
													String.format(
															"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"FechaNivel1",
															"row1", temp,
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
								}

							} else {

								row1.FechaNivel1 = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 31;

							temp = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Fecha_HoraIncidencia = ParserUtils
											.parseTo_Date(temp,
													"yyyy-MM-dd HH:mm:ss.SSS");

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1
											.setException(new RuntimeException(
													String.format(
															"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Fecha_HoraIncidencia",
															"row1", temp,
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
								}

							} else {

								row1.Fecha_HoraIncidencia = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 32;

							row1.GrupoResponsable = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 33;

							row1.CausaR = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 34;

							row1.ModificadaPor = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 35;

							row1.MotivoEstado = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 36;

							row1.ProblemaR = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 37;

							row1.Prioridad = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 38;

							row1.ReferenciaExterna = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 39;

							row1.Retipifica = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 40;

							row1.SEL_FTTH_Pruebade = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 41;

							row1.ServicioR = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 42;

							row1.ServicioI = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 43;

							row1.Severidad = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 44;

							row1.Sintoma = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 45;

							row1.SintomaI = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 46;

							row1.SolucionAbreviada = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 47;

							row1.SolucionDetallada = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 48;

							row1.SolucionServicio = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 49;

							row1.TempEstado = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 50;

							row1.Tipo = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 51;

							row1.TomadaPorAgente = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 52;

							row1.Servicio = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 53;

							row1.ViaEntradaTicket = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 54;

							row1.TomadaPorGrupo = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 55;

							row1.N_Inc_Principal = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 56;

							row1.TipoI = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row1 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
						// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tConvertType_1 main ] start
							 */

							currentComponent = "tConvertType_1";

							// row1
							// row1

							if (execStat) {
								runStat.updateStatOnConnection("row1"
										+ iterateId, 1, 1);
							}

							row3 = new row3Struct();
							boolean bHasError_tConvertType_1 = false;
							try {
								if ("".equals(row1.Grupo)) {
									row1.Grupo = null;
								}
								row3.Grupo = TypeConvert
										.String2String(row1.Grupo);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								if ("".equals(row1.IDIncidencia)) {
									row1.IDIncidencia = null;
								}
								row3.IDIncidencia = TypeConvert
										.String2String(row1.IDIncidencia);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								row3.Status_History_Atendida_TIME = TypeConvert
										.Date2Date(row1.Status_History_Atendida_TIME);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								if ("".equals(row1.CAR_FTTH_NumeroCTO)) {
									row1.CAR_FTTH_NumeroCTO = null;
								}
								row3.CAR_FTTH_NumeroCTO = TypeConvert
										.String2String(row1.CAR_FTTH_NumeroCTO);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								if ("".equals(row1.CAR_FTTH_Provincia)) {
									row1.CAR_FTTH_Provincia = null;
								}
								row3.CAR_FTTH_Provincia = TypeConvert
										.String2String(row1.CAR_FTTH_Provincia);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								if ("".equals(row1.Estado)) {
									row1.Estado = null;
								}
								row3.Estado = TypeConvert
										.String2String(row1.Estado);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								if ("".equals(row1.GrupoEscalada)) {
									row1.GrupoEscalada = null;
								}
								row3.GrupoEscalada = TypeConvert
										.String2String(row1.GrupoEscalada);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								if ("".equals(row1.CAR_ID_Cliente)) {
									row1.CAR_ID_Cliente = null;
								}
								row3.CAR_ID_Cliente = TypeConvert
										.String2String(row1.CAR_ID_Cliente);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								if ("".equals(row1.Cliente)) {
									row1.Cliente = null;
								}
								row3.Cliente = TypeConvert
										.String2String(row1.Cliente);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								if ("".equals(row1.Apellidos)) {
									row1.Apellidos = null;
								}
								row3.Apellidos = TypeConvert
										.String2String(row1.Apellidos);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								if ("".equals(row1.CAR_ID_Direccion)) {
									row1.CAR_ID_Direccion = null;
								}
								row3.CAR_ID_Direccion = TypeConvert
										.String2String(row1.CAR_ID_Direccion);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								if ("".equals(row1.CAR_FTTH_Poblacion)) {
									row1.CAR_FTTH_Poblacion = null;
								}
								row3.CAR_FTTH_Poblacion = TypeConvert
										.String2String(row1.CAR_FTTH_Poblacion);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								if ("".equals(row1.CAR_FTTH_CodPostal)) {
									row1.CAR_FTTH_CodPostal = null;
								}
								row3.CAR_FTTH_CodPostal = TypeConvert
										.String2String(row1.CAR_FTTH_CodPostal);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								if ("".equals(row1.CAR_FTTH_Gescal37)) {
									row1.CAR_FTTH_Gescal37 = null;
								}
								row3.CAR_FTTH_Gescal37 = TypeConvert
										.String2String(row1.CAR_FTTH_Gescal37);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								if ("".equals(row1.CAR_FTTH_IUA)) {
									row1.CAR_FTTH_IUA = null;
								}
								row3.CAR_FTTH_IUA = TypeConvert
										.String2String(row1.CAR_FTTH_IUA);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								if ("".equals(row1.CAR_FTTH_TipoCTO)) {
									row1.CAR_FTTH_TipoCTO = null;
								}
								row3.CAR_FTTH_TipoCTO = TypeConvert
										.String2String(row1.CAR_FTTH_TipoCTO);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								if ("".equals(row1.CAR_FTTH_TelefonoServicio)) {
									row1.CAR_FTTH_TelefonoServicio = null;
								}
								row3.CAR_FTTH_TelefonoServicio = TypeConvert
										.String2String(row1.CAR_FTTH_TelefonoServicio);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								if ("".equals(row1.CAR_FTTH_Numero)) {
									row1.CAR_FTTH_Numero = null;
								}
								row3.CAR_FTTH_Numero = TypeConvert
										.String2String(row1.CAR_FTTH_Numero);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								if ("".equals(row1.CAR_FTTH_PerfilServicio)) {
									row1.CAR_FTTH_PerfilServicio = null;
								}
								row3.CAR_FTTH_PerfilServicio = TypeConvert
										.String2String(row1.CAR_FTTH_PerfilServicio);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								if ("".equals(row1.Descripcion)) {
									row1.Descripcion = null;
								}
								row3.Descripcion = TypeConvert
										.String2String(row1.Descripcion);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								if ("".equals(row1.DescripcionI)) {
									row1.DescripcionI = null;
								}
								row3.DescripcionI = TypeConvert
										.String2String(row1.DescripcionI);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								if ("".equals(row1.DescripcionProblema)) {
									row1.DescripcionProblema = null;
								}
								row3.DescripcionProblema = TypeConvert
										.String2String(row1.DescripcionProblema);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								if ("".equals(row1.EstadoProvision)) {
									row1.EstadoProvision = null;
								}
								row3.EstadoProvision = TypeConvert
										.String2String(row1.EstadoProvision);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								if ("".equals(row1.EstadoReal)) {
									row1.EstadoReal = null;
								}
								row3.EstadoReal = TypeConvert
										.String2String(row1.EstadoReal);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								row3.FEC_Fecha_Cierre = TypeConvert
										.Date2Date(row1.FEC_Fecha_Cierre);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								row3.FEC_Fecha_Resolucion = TypeConvert
										.Date2Date(row1.FEC_Fecha_Resolucion);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								row3.FEC_Vencimiento_SLA = TypeConvert
										.Date2Date(row1.FEC_Vencimiento_SLA);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								row3.FHEnviadoServTecnico = TypeConvert
										.Date2Date(row1.FHEnviadoServTecnico);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								row3.FHEscaladoTerceros = TypeConvert
										.Date2Date(row1.FHEscaladoTerceros);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								row3.FechaModificacion = TypeConvert
										.Date2Date(row1.FechaModificacion);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								row3.FechaNivel1 = TypeConvert
										.Date2Date(row1.FechaNivel1);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								row3.Fecha_HoraIncidencia = TypeConvert
										.Date2Date(row1.Fecha_HoraIncidencia);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								if ("".equals(row1.GrupoResponsable)) {
									row1.GrupoResponsable = null;
								}
								row3.GrupoResponsable = TypeConvert
										.String2String(row1.GrupoResponsable);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								if ("".equals(row1.CausaR)) {
									row1.CausaR = null;
								}
								row3.CausaR = TypeConvert
										.String2String(row1.CausaR);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								if ("".equals(row1.ModificadaPor)) {
									row1.ModificadaPor = null;
								}
								row3.ModificadaPor = TypeConvert
										.String2String(row1.ModificadaPor);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								if ("".equals(row1.MotivoEstado)) {
									row1.MotivoEstado = null;
								}
								row3.MotivoEstado = TypeConvert
										.String2String(row1.MotivoEstado);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								if ("".equals(row1.ProblemaR)) {
									row1.ProblemaR = null;
								}
								row3.ProblemaR = TypeConvert
										.String2String(row1.ProblemaR);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								if ("".equals(row1.Prioridad)) {
									row1.Prioridad = null;
								}
								row3.Prioridad = TypeConvert
										.String2String(row1.Prioridad);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								if ("".equals(row1.ReferenciaExterna)) {
									row1.ReferenciaExterna = null;
								}
								row3.ReferenciaExterna = TypeConvert
										.String2String(row1.ReferenciaExterna);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								if ("".equals(row1.Retipifica)) {
									row1.Retipifica = null;
								}
								row3.Retipifica = TypeConvert
										.String2String(row1.Retipifica);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								if ("".equals(row1.SEL_FTTH_Pruebade)) {
									row1.SEL_FTTH_Pruebade = null;
								}
								row3.SEL_FTTH_Pruebade = TypeConvert
										.String2String(row1.SEL_FTTH_Pruebade);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								if ("".equals(row1.ServicioR)) {
									row1.ServicioR = null;
								}
								row3.ServicioR = TypeConvert
										.String2String(row1.ServicioR);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								if ("".equals(row1.ServicioI)) {
									row1.ServicioI = null;
								}
								row3.ServicioI = TypeConvert
										.String2String(row1.ServicioI);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								if ("".equals(row1.Severidad)) {
									row1.Severidad = null;
								}
								row3.Severidad = TypeConvert
										.String2String(row1.Severidad);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								if ("".equals(row1.Sintoma)) {
									row1.Sintoma = null;
								}
								row3.Sintoma = TypeConvert
										.String2String(row1.Sintoma);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								if ("".equals(row1.SintomaI)) {
									row1.SintomaI = null;
								}
								row3.SintomaI = TypeConvert
										.String2String(row1.SintomaI);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								if ("".equals(row1.SolucionAbreviada)) {
									row1.SolucionAbreviada = null;
								}
								row3.SolucionAbreviada = TypeConvert
										.String2String(row1.SolucionAbreviada);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								if ("".equals(row1.SolucionDetallada)) {
									row1.SolucionDetallada = null;
								}
								row3.SolucionDetallada = TypeConvert
										.String2String(row1.SolucionDetallada);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								if ("".equals(row1.SolucionServicio)) {
									row1.SolucionServicio = null;
								}
								row3.SolucionServicio = TypeConvert
										.String2String(row1.SolucionServicio);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								if ("".equals(row1.TempEstado)) {
									row1.TempEstado = null;
								}
								row3.TempEstado = TypeConvert
										.String2String(row1.TempEstado);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								if ("".equals(row1.Tipo)) {
									row1.Tipo = null;
								}
								row3.Tipo = TypeConvert
										.String2String(row1.Tipo);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								if ("".equals(row1.TomadaPorAgente)) {
									row1.TomadaPorAgente = null;
								}
								row3.TomadaPorAgente = TypeConvert
										.String2String(row1.TomadaPorAgente);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								if ("".equals(row1.Servicio)) {
									row1.Servicio = null;
								}
								row3.Servicio = TypeConvert
										.String2String(row1.Servicio);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								if ("".equals(row1.ViaEntradaTicket)) {
									row1.ViaEntradaTicket = null;
								}
								row3.ViaEntradaTicket = TypeConvert
										.String2String(row1.ViaEntradaTicket);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								if ("".equals(row1.TomadaPorGrupo)) {
									row1.TomadaPorGrupo = null;
								}
								row3.TomadaPorGrupo = TypeConvert
										.String2String(row1.TomadaPorGrupo);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								if ("".equals(row1.N_Inc_Principal)) {
									row1.N_Inc_Principal = null;
								}
								row3.N_Inc_Principal = TypeConvert
										.String2String(row1.N_Inc_Principal);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								if ("".equals(row1.TipoI)) {
									row1.TipoI = null;
								}
								row3.TipoI = TypeConvert
										.String2String(row1.TipoI);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							if (bHasError_tConvertType_1) {
								row3 = null;
							}

							nb_line_tConvertType_1++;

							tos_count_tConvertType_1++;

							/**
							 * [tConvertType_1 main ] stop
							 */

							/**
							 * [tConvertType_1 process_data_begin ] start
							 */

							currentComponent = "tConvertType_1";

							/**
							 * [tConvertType_1 process_data_begin ] stop
							 */
							// Start of branch "row3"
							if (row3 != null) {

								/**
								 * [tUniqRow_1 main ] start
								 */

								currentComponent = "tUniqRow_1";

								// row3
								// row3

								if (execStat) {
									runStat.updateStatOnConnection("row3"
											+ iterateId, 1, 1);
								}

								row2 = null;
								if (row3.IDIncidencia == null) {
									finder_tUniqRow_1.IDIncidencia = null;
								} else {
									finder_tUniqRow_1.IDIncidencia = row3.IDIncidencia
											.toLowerCase();
								}
								finder_tUniqRow_1.hashCodeDirty = true;
								if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
									KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

									if (row3.IDIncidencia == null) {
										new_tUniqRow_1.IDIncidencia = null;
									} else {
										new_tUniqRow_1.IDIncidencia = row3.IDIncidencia
												.toLowerCase();
									}

									keystUniqRow_1.add(new_tUniqRow_1);
									if (row2 == null) {

										row2 = new row2Struct();
									}
									row2.Grupo = row3.Grupo;
									row2.IDIncidencia = row3.IDIncidencia;
									row2.Status_History_Atendida_TIME = row3.Status_History_Atendida_TIME;
									row2.CAR_FTTH_NumeroCTO = row3.CAR_FTTH_NumeroCTO;
									row2.CAR_FTTH_Provincia = row3.CAR_FTTH_Provincia;
									row2.Estado = row3.Estado;
									row2.GrupoEscalada = row3.GrupoEscalada;
									row2.CAR_ID_Cliente = row3.CAR_ID_Cliente;
									row2.Cliente = row3.Cliente;
									row2.Apellidos = row3.Apellidos;
									row2.CAR_ID_Direccion = row3.CAR_ID_Direccion;
									row2.CAR_FTTH_Poblacion = row3.CAR_FTTH_Poblacion;
									row2.CAR_FTTH_CodPostal = row3.CAR_FTTH_CodPostal;
									row2.CAR_FTTH_Gescal37 = row3.CAR_FTTH_Gescal37;
									row2.CAR_FTTH_IUA = row3.CAR_FTTH_IUA;
									row2.CAR_FTTH_TipoCTO = row3.CAR_FTTH_TipoCTO;
									row2.CAR_FTTH_TelefonoServicio = row3.CAR_FTTH_TelefonoServicio;
									row2.CAR_FTTH_Numero = row3.CAR_FTTH_Numero;
									row2.CAR_FTTH_PerfilServicio = row3.CAR_FTTH_PerfilServicio;
									row2.Descripcion = row3.Descripcion;
									row2.DescripcionI = row3.DescripcionI;
									row2.DescripcionProblema = row3.DescripcionProblema;
									row2.EstadoProvision = row3.EstadoProvision;
									row2.EstadoReal = row3.EstadoReal;
									row2.FEC_Fecha_Cierre = row3.FEC_Fecha_Cierre;
									row2.FEC_Fecha_Resolucion = row3.FEC_Fecha_Resolucion;
									row2.FEC_Vencimiento_SLA = row3.FEC_Vencimiento_SLA;
									row2.FHEnviadoServTecnico = row3.FHEnviadoServTecnico;
									row2.FHEscaladoTerceros = row3.FHEscaladoTerceros;
									row2.FechaModificacion = row3.FechaModificacion;
									row2.FechaNivel1 = row3.FechaNivel1;
									row2.Fecha_HoraIncidencia = row3.Fecha_HoraIncidencia;
									row2.GrupoResponsable = row3.GrupoResponsable;
									row2.CausaR = row3.CausaR;
									row2.ModificadaPor = row3.ModificadaPor;
									row2.MotivoEstado = row3.MotivoEstado;
									row2.ProblemaR = row3.ProblemaR;
									row2.Prioridad = row3.Prioridad;
									row2.ReferenciaExterna = row3.ReferenciaExterna;
									row2.Retipifica = row3.Retipifica;
									row2.SEL_FTTH_Pruebade = row3.SEL_FTTH_Pruebade;
									row2.ServicioR = row3.ServicioR;
									row2.ServicioI = row3.ServicioI;
									row2.Severidad = row3.Severidad;
									row2.Sintoma = row3.Sintoma;
									row2.SintomaI = row3.SintomaI;
									row2.SolucionAbreviada = row3.SolucionAbreviada;
									row2.SolucionDetallada = row3.SolucionDetallada;
									row2.SolucionServicio = row3.SolucionServicio;
									row2.TempEstado = row3.TempEstado;
									row2.Tipo = row3.Tipo;
									row2.TomadaPorAgente = row3.TomadaPorAgente;
									row2.Servicio = row3.Servicio;
									row2.ViaEntradaTicket = row3.ViaEntradaTicket;
									row2.TomadaPorGrupo = row3.TomadaPorGrupo;
									row2.N_Inc_Principal = row3.N_Inc_Principal;
									row2.TipoI = row3.TipoI;
									nb_uniques_tUniqRow_1++;
								} else {
									nb_duplicates_tUniqRow_1++;
								}

								tos_count_tUniqRow_1++;

								/**
								 * [tUniqRow_1 main ] stop
								 */

								/**
								 * [tUniqRow_1 process_data_begin ] start
								 */

								currentComponent = "tUniqRow_1";

								/**
								 * [tUniqRow_1 process_data_begin ] stop
								 */
								// Start of branch "row2"
								if (row2 != null) {

									/**
									 * [tMSSqlOutput_1 main ] start
									 */

									currentComponent = "tMSSqlOutput_1";

									// row2
									// row2

									if (execStat) {
										runStat.updateStatOnConnection("row2"
												+ iterateId, 1, 1);
									}

									whetherReject_tMSSqlOutput_1 = false;
									if (row2.Grupo == null) {
										pstmt_tMSSqlOutput_1.setNull(1,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMSSqlOutput_1.setString(1,
												row2.Grupo);
									}

									if (row2.IDIncidencia == null) {
										pstmt_tMSSqlOutput_1.setNull(2,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMSSqlOutput_1.setString(2,
												row2.IDIncidencia);
									}

									if (row2.Status_History_Atendida_TIME != null) {
										pstmt_tMSSqlOutput_1
												.setTimestamp(
														3,
														new java.sql.Timestamp(
																row2.Status_History_Atendida_TIME
																		.getTime()));
									} else {
										pstmt_tMSSqlOutput_1.setNull(3,
												java.sql.Types.DATE);
									}

									if (row2.CAR_FTTH_NumeroCTO == null) {
										pstmt_tMSSqlOutput_1.setNull(4,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMSSqlOutput_1.setString(4,
												row2.CAR_FTTH_NumeroCTO);
									}

									if (row2.CAR_FTTH_Provincia == null) {
										pstmt_tMSSqlOutput_1.setNull(5,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMSSqlOutput_1.setString(5,
												row2.CAR_FTTH_Provincia);
									}

									if (row2.Estado == null) {
										pstmt_tMSSqlOutput_1.setNull(6,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMSSqlOutput_1.setString(6,
												row2.Estado);
									}

									if (row2.GrupoEscalada == null) {
										pstmt_tMSSqlOutput_1.setNull(7,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMSSqlOutput_1.setString(7,
												row2.GrupoEscalada);
									}

									if (row2.CAR_ID_Cliente == null) {
										pstmt_tMSSqlOutput_1.setNull(8,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMSSqlOutput_1.setString(8,
												row2.CAR_ID_Cliente);
									}

									if (row2.Cliente == null) {
										pstmt_tMSSqlOutput_1.setNull(9,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMSSqlOutput_1.setString(9,
												row2.Cliente);
									}

									if (row2.Apellidos == null) {
										pstmt_tMSSqlOutput_1.setNull(10,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMSSqlOutput_1.setString(10,
												row2.Apellidos);
									}

									if (row2.CAR_ID_Direccion == null) {
										pstmt_tMSSqlOutput_1.setNull(11,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMSSqlOutput_1.setString(11,
												row2.CAR_ID_Direccion);
									}

									if (row2.CAR_FTTH_Poblacion == null) {
										pstmt_tMSSqlOutput_1.setNull(12,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMSSqlOutput_1.setString(12,
												row2.CAR_FTTH_Poblacion);
									}

									if (row2.CAR_FTTH_CodPostal == null) {
										pstmt_tMSSqlOutput_1.setNull(13,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMSSqlOutput_1.setString(13,
												row2.CAR_FTTH_CodPostal);
									}

									if (row2.CAR_FTTH_Gescal37 == null) {
										pstmt_tMSSqlOutput_1.setNull(14,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMSSqlOutput_1.setString(14,
												row2.CAR_FTTH_Gescal37);
									}

									if (row2.CAR_FTTH_IUA == null) {
										pstmt_tMSSqlOutput_1.setNull(15,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMSSqlOutput_1.setString(15,
												row2.CAR_FTTH_IUA);
									}

									if (row2.CAR_FTTH_TipoCTO == null) {
										pstmt_tMSSqlOutput_1.setNull(16,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMSSqlOutput_1.setString(16,
												row2.CAR_FTTH_TipoCTO);
									}

									if (row2.CAR_FTTH_TelefonoServicio == null) {
										pstmt_tMSSqlOutput_1.setNull(17,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMSSqlOutput_1.setString(17,
												row2.CAR_FTTH_TelefonoServicio);
									}

									if (row2.CAR_FTTH_Numero == null) {
										pstmt_tMSSqlOutput_1.setNull(18,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMSSqlOutput_1.setString(18,
												row2.CAR_FTTH_Numero);
									}

									if (row2.CAR_FTTH_PerfilServicio == null) {
										pstmt_tMSSqlOutput_1.setNull(19,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMSSqlOutput_1.setString(19,
												row2.CAR_FTTH_PerfilServicio);
									}

									if (row2.Descripcion == null) {
										pstmt_tMSSqlOutput_1.setNull(20,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMSSqlOutput_1.setString(20,
												row2.Descripcion);
									}

									if (row2.DescripcionI == null) {
										pstmt_tMSSqlOutput_1.setNull(21,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMSSqlOutput_1.setString(21,
												row2.DescripcionI);
									}

									if (row2.DescripcionProblema == null) {
										pstmt_tMSSqlOutput_1.setNull(22,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMSSqlOutput_1.setString(22,
												row2.DescripcionProblema);
									}

									if (row2.EstadoProvision == null) {
										pstmt_tMSSqlOutput_1.setNull(23,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMSSqlOutput_1.setString(23,
												row2.EstadoProvision);
									}

									if (row2.EstadoReal == null) {
										pstmt_tMSSqlOutput_1.setNull(24,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMSSqlOutput_1.setString(24,
												row2.EstadoReal);
									}

									if (row2.FEC_Fecha_Cierre != null) {
										pstmt_tMSSqlOutput_1.setTimestamp(
												25,
												new java.sql.Timestamp(
														row2.FEC_Fecha_Cierre
																.getTime()));
									} else {
										pstmt_tMSSqlOutput_1.setNull(25,
												java.sql.Types.DATE);
									}

									if (row2.FEC_Fecha_Resolucion != null) {
										pstmt_tMSSqlOutput_1
												.setTimestamp(
														26,
														new java.sql.Timestamp(
																row2.FEC_Fecha_Resolucion
																		.getTime()));
									} else {
										pstmt_tMSSqlOutput_1.setNull(26,
												java.sql.Types.DATE);
									}

									if (row2.FEC_Vencimiento_SLA != null) {
										pstmt_tMSSqlOutput_1
												.setTimestamp(
														27,
														new java.sql.Timestamp(
																row2.FEC_Vencimiento_SLA
																		.getTime()));
									} else {
										pstmt_tMSSqlOutput_1.setNull(27,
												java.sql.Types.DATE);
									}

									if (row2.FHEnviadoServTecnico != null) {
										pstmt_tMSSqlOutput_1
												.setTimestamp(
														28,
														new java.sql.Timestamp(
																row2.FHEnviadoServTecnico
																		.getTime()));
									} else {
										pstmt_tMSSqlOutput_1.setNull(28,
												java.sql.Types.DATE);
									}

									if (row2.FHEscaladoTerceros != null) {
										pstmt_tMSSqlOutput_1.setTimestamp(
												29,
												new java.sql.Timestamp(
														row2.FHEscaladoTerceros
																.getTime()));
									} else {
										pstmt_tMSSqlOutput_1.setNull(29,
												java.sql.Types.DATE);
									}

									if (row2.FechaModificacion != null) {
										pstmt_tMSSqlOutput_1.setTimestamp(
												30,
												new java.sql.Timestamp(
														row2.FechaModificacion
																.getTime()));
									} else {
										pstmt_tMSSqlOutput_1.setNull(30,
												java.sql.Types.DATE);
									}

									if (row2.FechaNivel1 != null) {
										pstmt_tMSSqlOutput_1.setTimestamp(
												31,
												new java.sql.Timestamp(
														row2.FechaNivel1
																.getTime()));
									} else {
										pstmt_tMSSqlOutput_1.setNull(31,
												java.sql.Types.DATE);
									}

									if (row2.Fecha_HoraIncidencia != null) {
										pstmt_tMSSqlOutput_1
												.setTimestamp(
														32,
														new java.sql.Timestamp(
																row2.Fecha_HoraIncidencia
																		.getTime()));
									} else {
										pstmt_tMSSqlOutput_1.setNull(32,
												java.sql.Types.DATE);
									}

									if (row2.GrupoResponsable == null) {
										pstmt_tMSSqlOutput_1.setNull(33,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMSSqlOutput_1.setString(33,
												row2.GrupoResponsable);
									}

									if (row2.CausaR == null) {
										pstmt_tMSSqlOutput_1.setNull(34,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMSSqlOutput_1.setString(34,
												row2.CausaR);
									}

									if (row2.ModificadaPor == null) {
										pstmt_tMSSqlOutput_1.setNull(35,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMSSqlOutput_1.setString(35,
												row2.ModificadaPor);
									}

									if (row2.MotivoEstado == null) {
										pstmt_tMSSqlOutput_1.setNull(36,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMSSqlOutput_1.setString(36,
												row2.MotivoEstado);
									}

									if (row2.ProblemaR == null) {
										pstmt_tMSSqlOutput_1.setNull(37,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMSSqlOutput_1.setString(37,
												row2.ProblemaR);
									}

									if (row2.Prioridad == null) {
										pstmt_tMSSqlOutput_1.setNull(38,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMSSqlOutput_1.setString(38,
												row2.Prioridad);
									}

									if (row2.ReferenciaExterna == null) {
										pstmt_tMSSqlOutput_1.setNull(39,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMSSqlOutput_1.setString(39,
												row2.ReferenciaExterna);
									}

									if (row2.Retipifica == null) {
										pstmt_tMSSqlOutput_1.setNull(40,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMSSqlOutput_1.setString(40,
												row2.Retipifica);
									}

									if (row2.SEL_FTTH_Pruebade == null) {
										pstmt_tMSSqlOutput_1.setNull(41,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMSSqlOutput_1.setString(41,
												row2.SEL_FTTH_Pruebade);
									}

									if (row2.ServicioR == null) {
										pstmt_tMSSqlOutput_1.setNull(42,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMSSqlOutput_1.setString(42,
												row2.ServicioR);
									}

									if (row2.ServicioI == null) {
										pstmt_tMSSqlOutput_1.setNull(43,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMSSqlOutput_1.setString(43,
												row2.ServicioI);
									}

									if (row2.Severidad == null) {
										pstmt_tMSSqlOutput_1.setNull(44,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMSSqlOutput_1.setString(44,
												row2.Severidad);
									}

									if (row2.Sintoma == null) {
										pstmt_tMSSqlOutput_1.setNull(45,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMSSqlOutput_1.setString(45,
												row2.Sintoma);
									}

									if (row2.SintomaI == null) {
										pstmt_tMSSqlOutput_1.setNull(46,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMSSqlOutput_1.setString(46,
												row2.SintomaI);
									}

									if (row2.SolucionAbreviada == null) {
										pstmt_tMSSqlOutput_1.setNull(47,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMSSqlOutput_1.setString(47,
												row2.SolucionAbreviada);
									}

									if (row2.SolucionDetallada == null) {
										pstmt_tMSSqlOutput_1.setNull(48,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMSSqlOutput_1.setString(48,
												row2.SolucionDetallada);
									}

									if (row2.SolucionServicio == null) {
										pstmt_tMSSqlOutput_1.setNull(49,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMSSqlOutput_1.setString(49,
												row2.SolucionServicio);
									}

									if (row2.TempEstado == null) {
										pstmt_tMSSqlOutput_1.setNull(50,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMSSqlOutput_1.setString(50,
												row2.TempEstado);
									}

									if (row2.Tipo == null) {
										pstmt_tMSSqlOutput_1.setNull(51,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMSSqlOutput_1.setString(51,
												row2.Tipo);
									}

									if (row2.TomadaPorAgente == null) {
										pstmt_tMSSqlOutput_1.setNull(52,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMSSqlOutput_1.setString(52,
												row2.TomadaPorAgente);
									}

									if (row2.Servicio == null) {
										pstmt_tMSSqlOutput_1.setNull(53,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMSSqlOutput_1.setString(53,
												row2.Servicio);
									}

									if (row2.ViaEntradaTicket == null) {
										pstmt_tMSSqlOutput_1.setNull(54,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMSSqlOutput_1.setString(54,
												row2.ViaEntradaTicket);
									}

									if (row2.TomadaPorGrupo == null) {
										pstmt_tMSSqlOutput_1.setNull(55,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMSSqlOutput_1.setString(55,
												row2.TomadaPorGrupo);
									}

									if (row2.N_Inc_Principal == null) {
										pstmt_tMSSqlOutput_1.setNull(56,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMSSqlOutput_1.setString(56,
												row2.N_Inc_Principal);
									}

									if (row2.TipoI == null) {
										pstmt_tMSSqlOutput_1.setNull(57,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tMSSqlOutput_1.setString(57,
												row2.TipoI);
									}

									pstmt_tMSSqlOutput_1.addBatch();
									nb_line_tMSSqlOutput_1++;

									batchSizeCounter_tMSSqlOutput_1++;

									if (!whetherReject_tMSSqlOutput_1) {
									}
									// ////////batch execute by batch
									// size///////
									class LimitBytesHelper_tMSSqlOutput_1 {
										public int limitBytePart1(
												int counter,
												java.sql.PreparedStatement pstmt_tMSSqlOutput_1)
												throws Exception {
											try {

												for (int countEach_tMSSqlOutput_1 : pstmt_tMSSqlOutput_1
														.executeBatch()) {
													if (countEach_tMSSqlOutput_1 == -2
															|| countEach_tMSSqlOutput_1 == -3) {
														break;
													}
													counter += countEach_tMSSqlOutput_1;
												}

											} catch (java.sql.BatchUpdateException e) {

												int countSum_tMSSqlOutput_1 = 0;
												for (int countEach_tMSSqlOutput_1 : e
														.getUpdateCounts()) {
													counter += (countEach_tMSSqlOutput_1 < 0 ? 0
															: countEach_tMSSqlOutput_1);
												}

												System.err.println(e
														.getMessage());

											}
											return counter;
										}

										public int limitBytePart2(
												int counter,
												java.sql.PreparedStatement pstmt_tMSSqlOutput_1)
												throws Exception {
											try {

												for (int countEach_tMSSqlOutput_1 : pstmt_tMSSqlOutput_1
														.executeBatch()) {
													if (countEach_tMSSqlOutput_1 == -2
															|| countEach_tMSSqlOutput_1 == -3) {
														break;
													}
													counter += countEach_tMSSqlOutput_1;
												}

											} catch (java.sql.BatchUpdateException e) {

												for (int countEach_tMSSqlOutput_1 : e
														.getUpdateCounts()) {
													counter += (countEach_tMSSqlOutput_1 < 0 ? 0
															: countEach_tMSSqlOutput_1);
												}

												System.err.println(e
														.getMessage());

											}
											return counter;
										}
									}
									if ((batchSize_tMSSqlOutput_1 > 0)
											&& (batchSize_tMSSqlOutput_1 <= batchSizeCounter_tMSSqlOutput_1)) {

										insertedCount_tMSSqlOutput_1 = new LimitBytesHelper_tMSSqlOutput_1()
												.limitBytePart1(
														insertedCount_tMSSqlOutput_1,
														pstmt_tMSSqlOutput_1);

										batchSizeCounter_tMSSqlOutput_1 = 0;
									}

									// //////////commit every////////////

									commitCounter_tMSSqlOutput_1++;
									if (commitEvery_tMSSqlOutput_1 <= commitCounter_tMSSqlOutput_1) {
										if ((batchSize_tMSSqlOutput_1 > 0)
												&& (batchSizeCounter_tMSSqlOutput_1 > 0)) {

											insertedCount_tMSSqlOutput_1 = new LimitBytesHelper_tMSSqlOutput_1()
													.limitBytePart1(
															insertedCount_tMSSqlOutput_1,
															pstmt_tMSSqlOutput_1);

											batchSizeCounter_tMSSqlOutput_1 = 0;
										}

										conn_tMSSqlOutput_1.commit();

										commitCounter_tMSSqlOutput_1 = 0;
									}

									tos_count_tMSSqlOutput_1++;

									/**
									 * [tMSSqlOutput_1 main ] stop
									 */

									/**
									 * [tMSSqlOutput_1 process_data_begin ]
									 * start
									 */

									currentComponent = "tMSSqlOutput_1";

									/**
									 * [tMSSqlOutput_1 process_data_begin ] stop
									 */

									/**
									 * [tMSSqlOutput_1 process_data_end ] start
									 */

									currentComponent = "tMSSqlOutput_1";

									/**
									 * [tMSSqlOutput_1 process_data_end ] stop
									 */

								} // End of branch "row2"

								/**
								 * [tUniqRow_1 process_data_end ] start
								 */

								currentComponent = "tUniqRow_1";

								/**
								 * [tUniqRow_1 process_data_end ] stop
								 */

							} // End of branch "row3"

							/**
							 * [tConvertType_1 process_data_end ] start
							 */

							currentComponent = "tConvertType_1";

							/**
							 * [tConvertType_1 process_data_end ] stop
							 */

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) ("C:/Automaticos/Remedy/IncidenciasVivas.txt") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE",
								fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tConvertType_1 end ] start
				 */

				currentComponent = "tConvertType_1";

				globalMap.put("tConvertType_1_NB_LINE", nb_line_tConvertType_1);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tConvertType_1", true);
				end_Hash.put("tConvertType_1", System.currentTimeMillis());

				/**
				 * [tConvertType_1 end ] stop
				 */

				/**
				 * [tUniqRow_1 end ] start
				 */

				currentComponent = "tUniqRow_1";

				globalMap.put("tUniqRow_1_NB_UNIQUES", nb_uniques_tUniqRow_1);
				globalMap.put("tUniqRow_1_NB_DUPLICATES",
						nb_duplicates_tUniqRow_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row3" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tUniqRow_1", true);
				end_Hash.put("tUniqRow_1", System.currentTimeMillis());

				/**
				 * [tUniqRow_1 end ] stop
				 */

				/**
				 * [tMSSqlOutput_1 end ] start
				 */

				currentComponent = "tMSSqlOutput_1";

				try {
					int countSum_tMSSqlOutput_1 = 0;
					if (pstmt_tMSSqlOutput_1 != null
							&& batchSizeCounter_tMSSqlOutput_1 > 0) {

						for (int countEach_tMSSqlOutput_1 : pstmt_tMSSqlOutput_1
								.executeBatch()) {
							if (countEach_tMSSqlOutput_1 == -2
									|| countEach_tMSSqlOutput_1 == -3) {
								break;
							}
							countSum_tMSSqlOutput_1 += countEach_tMSSqlOutput_1;
						}

					}

					insertedCount_tMSSqlOutput_1 += countSum_tMSSqlOutput_1;

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tMSSqlOutput_1 = 0;
					for (int countEach_tMSSqlOutput_1 : e.getUpdateCounts()) {
						countSum_tMSSqlOutput_1 += (countEach_tMSSqlOutput_1 < 0 ? 0
								: countEach_tMSSqlOutput_1);
					}

					insertedCount_tMSSqlOutput_1 += countSum_tMSSqlOutput_1;

					System.err.println(e.getMessage());

				}
				if (pstmt_tMSSqlOutput_1 != null) {

					pstmt_tMSSqlOutput_1.close();
					resourceMap.remove("pstmt_tMSSqlOutput_1");

				}
				resourceMap.put("statementClosed_tMSSqlOutput_1", true);
				conn_tMSSqlOutput_1.commit();

				conn_tMSSqlOutput_1.close();
				resourceMap.put("finish_tMSSqlOutput_1", true);

				nb_line_deleted_tMSSqlOutput_1 = nb_line_deleted_tMSSqlOutput_1
						+ deletedCount_tMSSqlOutput_1;
				nb_line_update_tMSSqlOutput_1 = nb_line_update_tMSSqlOutput_1
						+ updatedCount_tMSSqlOutput_1;
				nb_line_inserted_tMSSqlOutput_1 = nb_line_inserted_tMSSqlOutput_1
						+ insertedCount_tMSSqlOutput_1;
				nb_line_rejected_tMSSqlOutput_1 = nb_line_rejected_tMSSqlOutput_1
						+ rejectedCount_tMSSqlOutput_1;

				globalMap.put("tMSSqlOutput_1_NB_LINE", nb_line_tMSSqlOutput_1);
				globalMap.put("tMSSqlOutput_1_NB_LINE_UPDATED",
						nb_line_update_tMSSqlOutput_1);
				globalMap.put("tMSSqlOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tMSSqlOutput_1);
				globalMap.put("tMSSqlOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tMSSqlOutput_1);
				globalMap.put("tMSSqlOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tMSSqlOutput_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMSSqlOutput_1", true);
				end_Hash.put("tMSSqlOutput_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tMSSqlRow_1Process(globalMap);

				/**
				 * [tMSSqlOutput_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tConvertType_1 finally ] start
				 */

				currentComponent = "tConvertType_1";

				/**
				 * [tConvertType_1 finally ] stop
				 */

				/**
				 * [tUniqRow_1 finally ] start
				 */

				currentComponent = "tUniqRow_1";

				/**
				 * [tUniqRow_1 finally ] stop
				 */

				/**
				 * [tMSSqlOutput_1 finally ] start
				 */

				currentComponent = "tMSSqlOutput_1";

				try {
					if (resourceMap.get("statementClosed_tMSSqlOutput_1") == null) {
						java.sql.PreparedStatement pstmtToClose_tMSSqlOutput_1 = null;
						if ((pstmtToClose_tMSSqlOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tMSSqlOutput_1")) != null) {
							pstmtToClose_tMSSqlOutput_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tMSSqlOutput_1") == null) {
						java.sql.Connection ctn_tMSSqlOutput_1 = null;
						if ((ctn_tMSSqlOutput_1 = (java.sql.Connection) resourceMap
								.get("conn_tMSSqlOutput_1")) != null) {
							try {
								ctn_tMSSqlOutput_1.close();
							} catch (java.sql.SQLException sqlEx_tMSSqlOutput_1) {
								String errorMessage_tMSSqlOutput_1 = "failed to close the connection in tMSSqlOutput_1 :"
										+ sqlEx_tMSSqlOutput_1.getMessage();
								System.err.println(errorMessage_tMSSqlOutput_1);
							}
						}
					}
				}

				/**
				 * [tMSSqlOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public void tMSSqlRow_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMSSqlRow_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tMSSqlRow_1 begin ] start
				 */

				ok_Hash.put("tMSSqlRow_1", false);
				start_Hash.put("tMSSqlRow_1", System.currentTimeMillis());

				currentComponent = "tMSSqlRow_1";

				int tos_count_tMSSqlRow_1 = 0;

				java.sql.Connection conn_tMSSqlRow_1 = null;
				String query_tMSSqlRow_1 = "";
				boolean whetherReject_tMSSqlRow_1 = false;
				String driverClass_tMSSqlRow_1 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class.forName(driverClass_tMSSqlRow_1);

				String port_tMSSqlRow_1 = "1433";
				String dbname_tMSSqlRow_1 = "Remedy";

				String url_tMSSqlRow_1 = "jdbc:jtds:sqlserver://" + "MXMESCF02";

				if (!"".equals(port_tMSSqlRow_1)) {
					url_tMSSqlRow_1 += ":" + "1433";
				}
				if (!"".equals(dbname_tMSSqlRow_1)) {

					url_tMSSqlRow_1 += "//" + "Remedy";

				}
				url_tMSSqlRow_1 += ";appName=" + projectName + ";" + "";

				String dbUser_tMSSqlRow_1 = "DST_ADM";

				final String decryptedPassword_tMSSqlRow_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("9ef1eafe0b3d3c1c25206238d3e3ad11");

				String dbPwd_tMSSqlRow_1 = decryptedPassword_tMSSqlRow_1;

				conn_tMSSqlRow_1 = java.sql.DriverManager.getConnection(
						url_tMSSqlRow_1, dbUser_tMSSqlRow_1, dbPwd_tMSSqlRow_1);

				resourceMap.put("conn_tMSSqlRow_1", conn_tMSSqlRow_1);
				if (conn_tMSSqlRow_1.getAutoCommit()) {

					conn_tMSSqlRow_1.setAutoCommit(false);

				}
				int commitEvery_tMSSqlRow_1 = 10000;
				int commitCounter_tMSSqlRow_1 = 0;

				java.sql.Statement stmt_tMSSqlRow_1 = conn_tMSSqlRow_1
						.createStatement();
				resourceMap.put("stmt_tMSSqlRow_1", stmt_tMSSqlRow_1);

				/**
				 * [tMSSqlRow_1 begin ] stop
				 */

				/**
				 * [tMSSqlRow_1 main ] start
				 */

				currentComponent = "tMSSqlRow_1";

				query_tMSSqlRow_1 = "Exec ActualizacionINCIDENCIAS_Vivas";
				whetherReject_tMSSqlRow_1 = false;
				globalMap.put("tMSSqlRow_1_QUERY", query_tMSSqlRow_1);
				try {
					stmt_tMSSqlRow_1.execute(query_tMSSqlRow_1);

				} catch (java.lang.Exception e) {
					whetherReject_tMSSqlRow_1 = true;

					System.err.print(e.getMessage());

				}

				commitCounter_tMSSqlRow_1++;
				if (commitEvery_tMSSqlRow_1 <= commitCounter_tMSSqlRow_1) {

					conn_tMSSqlRow_1.commit();

					commitCounter_tMSSqlRow_1 = 0;
				}

				tos_count_tMSSqlRow_1++;

				/**
				 * [tMSSqlRow_1 main ] stop
				 */

				/**
				 * [tMSSqlRow_1 process_data_begin ] start
				 */

				currentComponent = "tMSSqlRow_1";

				/**
				 * [tMSSqlRow_1 process_data_begin ] stop
				 */

				/**
				 * [tMSSqlRow_1 process_data_end ] start
				 */

				currentComponent = "tMSSqlRow_1";

				/**
				 * [tMSSqlRow_1 process_data_end ] stop
				 */

				/**
				 * [tMSSqlRow_1 end ] start
				 */

				currentComponent = "tMSSqlRow_1";

				stmt_tMSSqlRow_1.close();
				resourceMap.remove("stmt_tMSSqlRow_1");
				resourceMap.put("statementClosed_tMSSqlRow_1", true);
				if (commitEvery_tMSSqlRow_1 > commitCounter_tMSSqlRow_1) {

					conn_tMSSqlRow_1.commit();

					commitCounter_tMSSqlRow_1 = 0;

				}
				conn_tMSSqlRow_1.close();

				resourceMap.put("finish_tMSSqlRow_1", true);

				ok_Hash.put("tMSSqlRow_1", true);
				end_Hash.put("tMSSqlRow_1", System.currentTimeMillis());

				/**
				 * [tMSSqlRow_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tMSSqlRow_1 finally ] start
				 */

				currentComponent = "tMSSqlRow_1";

				try {
					if (resourceMap.get("statementClosed_tMSSqlRow_1") == null) {
						java.sql.Statement stmtToClose_tMSSqlRow_1 = null;
						if ((stmtToClose_tMSSqlRow_1 = (java.sql.Statement) resourceMap
								.remove("stmt_tMSSqlRow_1")) != null) {
							stmtToClose_tMSSqlRow_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tMSSqlRow_1") == null) {
						java.sql.Connection ctn_tMSSqlRow_1 = null;
						if ((ctn_tMSSqlRow_1 = (java.sql.Connection) resourceMap
								.get("conn_tMSSqlRow_1")) != null) {
							try {
								ctn_tMSSqlRow_1.close();
							} catch (java.sql.SQLException sqlEx_tMSSqlRow_1) {
								String errorMessage_tMSSqlRow_1 = "failed to close the connection in tMSSqlRow_1 :"
										+ sqlEx_tMSSqlRow_1.getMessage();
								System.err.println(errorMessage_tMSSqlRow_1);
							}
						}
					}
				}

				/**
				 * [tMSSqlRow_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMSSqlRow_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private SyncInt runningThreadCount = new SyncInt();

	private class SyncInt {
		private int count = 0;

		public synchronized void add(int i) {
			count += i;
		}

		public synchronized int getCount() {
			return count;
		}
	}

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final IncidenciasVivas IncidenciasVivasClass = new IncidenciasVivas();

		int exitCode = IncidenciasVivasClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = IncidenciasVivas.class
					.getClassLoader().getResourceAsStream(
							"datawarehouse/incidenciasvivas_0_1/contexts/"
									+ contextStr + ".properties");
			if (inContext == null) {
				inContext = IncidenciasVivas.class
						.getClassLoader()
						.getResourceAsStream(
								"config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				defaultProps.load(inContext);
				inContext.close();
				context = new ContextProperties(defaultProps);
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param
				// is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param
							.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs
		final Thread launchingThread = Thread.currentThread();
		runningThreadCount.add(1);
		new Thread() {
			public void run() {
				java.util.Map threadRunResultMap = new java.util.HashMap();
				threadRunResultMap.put("errorCode", null);
				threadRunResultMap.put("status", "");
				threadLocal.set(threadRunResultMap);

				try {
					((java.util.Map) threadLocal.get()).put("errorCode", null);
					tSystem_1Process(globalMap);
					if (!"failure".equals(((java.util.Map) threadLocal.get())
							.get("status"))) {
						((java.util.Map) threadLocal.get())
								.put("status", "end");
					}
				} catch (TalendException e_tSystem_1) {
					globalMap.put("tSystem_1_SUBPROCESS_STATE", -1);

					e_tSystem_1.printStackTrace();

				} catch (java.lang.Error e_tSystem_1) {
					globalMap.put("tSystem_1_SUBPROCESS_STATE", -1);
					((java.util.Map) threadLocal.get())
							.put("status", "failure");
					throw e_tSystem_1;

				} finally {
					Integer localErrorCode = (Integer) (((java.util.Map) threadLocal
							.get()).get("errorCode"));
					String localStatus = (String) (((java.util.Map) threadLocal
							.get()).get("status"));
					if (localErrorCode != null) {
						if (errorCode == null
								|| localErrorCode.compareTo(errorCode) > 0) {
							errorCode = localErrorCode;
						}
					}
					if (!status.equals("failure")) {
						status = localStatus;
					}

					if ("true".equals(((java.util.Map) threadLocal.get())
							.get("JobInterrupted"))) {
						launchingThread.interrupt();
					}

					runningThreadCount.add(-1);
				}
			}
		}.start();

		boolean interrupted = false;
		while (runningThreadCount.getCount() > 0) {
			try {
				Thread.sleep(10);
			} catch (java.lang.InterruptedException e) {
				interrupted = true;
			} catch (java.lang.Exception e) {
				e.printStackTrace();
			}
		}

		if (interrupted) {
			Thread.currentThread().interrupt();
		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : IncidenciasVivas");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 175859 characters generated by Talend Open Studio for Data Integration on the
 * 11 de diciembre de 2018 17:27:19 CET
 ************************************************************************************************/
